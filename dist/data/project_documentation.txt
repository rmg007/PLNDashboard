// ===== C:\Users\mhali\OneDrive\Documents\NewDashboard\my-dashboard\src\components\ChartTableComponent.jsx =====
// src/components/ChartTableComponent.jsx

import React, { useState, useMemo, useRef, useEffect, useCallback, useLayoutEffect } from 'react';
import { useReactTable, getCoreRowModel, getSortedRowModel, getPaginationRowModel } from '@tanstack/react-table';
import { useDraggableSplitter } from '../hooks/useDraggableSplitter';
import * as XLSX from 'xlsx';
import Plotly from 'plotly.js-dist-min';
import { initTooltips } from '../utils/tooltipInit';

import Toolbar from './ChartTableComponent/Toolbar';
import Chart from './ChartTableComponent/Chart';
import Table from './ChartTableComponent/Table';

export default function ChartTableComponent(props) {
    const {
        data, columns, chartTitle, xAxisTitle, yAxisTitle, xAccessor, yAccessor,
        splitterOrientation = 'vertical', initialSplitPos = 70, baseBarColor,
        traces, barMode, 
        // Support both chartType and initialChartType props
        initialChartType: propInitialChartType, chartType: propChartType, 
        xAxisType = 'category',
        showPagination, showChartTypeSwitcher = true, xAxisTickAngle, chartLayout = {},
        showTrendLine = true, showAverageLine = true, hideSplitter = false,
        showBarLabels = false, barLabelPosition = 'outside',
        barLabelInsideAnchor = 'middle', barLabelFontColor = 'black',
        containerRef: externalContainerRef, showTableToggle = true,
        initialTableWidth = null, disableHighlighting = false,
        showLineLabels = false, id, disableSelection = false,
        dataLabelFontColor = 'black', // New prop for line chart data label color
        showDataLabels = false // New prop to explicitly control data labels
    } = props;
    
    // Determine initial chart type from props, with priority: chartType > initialChartType > default 'bar'
    const initialChartTypeFromProps = propChartType || propInitialChartType || 'bar';

    // State for tracking highlighted and selected indices
    const [highlightedIndex, setHighlightedIndex] = useState(null);
    const [highlightedCurve, setHighlightedCurve] = useState(null);
    const [selectedIndices, setSelectedIndices] = useState(new Set());
    // Initialize state directly from the prop, ensuring it's defined or defaults to 'bar'
    const [chartType, setChartType] = useState(initialChartTypeFromProps || 'bar');

    // Effect to update chartType if the prop changes after initial render
    useEffect(() => {
        setChartType(initialChartTypeFromProps);
    }, [initialChartTypeFromProps]);

    const [sorting, setSorting] = useState([]);
    const [tableVisible, setTableVisible] = useState(true);
    
    // References
    const chartRef = useRef(null);
    const localContainerRef = useRef(null);
    const containerRef = externalContainerRef || localContainerRef;
    
    // Initialize tooltips after render
    useEffect(() => {
        initTooltips();
    }, []);

    // Splitter functionality
    const [finalInitialSplit, setFinalInitialSplit] = useState(initialSplitPos);

    useLayoutEffect(() => {
        if (initialTableWidth && containerRef.current) {
            const containerWidth = containerRef.current.offsetWidth;
            if (containerWidth > 0 && splitterOrientation === 'vertical') {
                const tableWidthPercent = (initialTableWidth / containerWidth) * 100;
                setFinalInitialSplit(100 - tableWidthPercent);
            }
        }
    }, [initialTableWidth, splitterOrientation]);

    const { splitPos, isDragging, handleMouseDown } = useDraggableSplitter(containerRef, finalInitialSplit, splitterOrientation);
    
    // Table initialization
    const table = useReactTable({
        data: data || [],
        columns: columns || [],
        state: { sorting },
        onSortingChange: setSorting,
        getCoreRowModel: getCoreRowModel(),
        getSortedRowModel: getSortedRowModel(),
        getPaginationRowModel: getPaginationRowModel(),
    });

    // Generate chart traces based on data and settings
    const chartTraces = useMemo(() => {
        if (traces) {
            let finalTraces = [];
            
            // Process traces based on chart type
            if (chartType === 'line') {
                finalTraces = traces.map(trace => {
                    // Show data labels for line charts when showDataLabels or showLineLabels is true
                    if (id === 'chartPSCActivity' || showLineLabels || showDataLabels) {
                        return { 
                            ...trace,
                            type: 'scatter',
                            mode: 'lines+markers+text',
                            text: trace.y.map(y => y.toLocaleString()),
                            textposition: 'top center',
                            textfont: {
                                color: dataLabelFontColor,
                                size: 12
                            },
                            marker: {
                                color: dataLabelFontColor || (document.body.classList.contains('dark') ? '#FFF' : '#333')
                            }
                        };
                    }
                    return { ...trace, type: 'scatter', mode: 'lines+markers' };
                });
            } else {
                finalTraces = [...traces];
            }
            
            // Add average line if enabled and we have trace data
            if (showAverageLine && traces.length > 0 && traces[0].y && traces[0].y.length > 0) {
                // Calculate average from the first trace (main data series)
                const yValues = traces[0].y;
                const average = yValues.reduce((a, b) => a + b, 0) / yValues.length;
                
                // Get x-axis range for the average line
                const xValues = traces[0].x;
                
                // Add average line trace
                finalTraces.push({
                    x: [xValues[0], xValues[xValues.length - 1]],
                    y: [average, average],
                    type: 'scatter',
                    mode: 'lines',
                    name: `Average: ${average.toLocaleString()}`,
                    line: { color: '#ff7f0e', dash: 'dash', width: 2 },
                    hoverinfo: 'name'
                });
            }
            
            // Add trend line if enabled and we have trace data
            if (showTrendLine && traces.length > 0 && traces[0].y && traces[0].y.length > 1) {
                const yValues = traces[0].y;
                const xValues = traces[0].x;
                const n = yValues.length;
                
                // Create x indices for calculation (0, 1, 2, ...)
                const xIndices = Array.from({length: n}, (_, i) => i);
                
                // Calculate linear regression
                const sumX = xIndices.reduce((a, b) => a + b, 0);
                const sumY = yValues.reduce((a, b) => a + b, 0);
                const sumXY = xIndices.map((xi, i) => xi * yValues[i]).reduce((a, b) => a + b, 0);
                const sumXX = xIndices.map(xi => xi * xi).reduce((a, b) => a + b, 0);
                
                const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
                const intercept = (sumY - slope * sumX) / n;
                
                // Calculate trend line y values
                const trendY = xIndices.map(xi => slope * xi + intercept);
                
                // Add trend line trace
                finalTraces.push({
                    x: xValues,
                    y: trendY,
                    type: 'scatter',
                    mode: 'lines',
                    name: 'Trend',
                    line: { color: '#d62728', width: 2, shape: 'spline' },
                    hoverinfo: 'name'
                });
            }
            
            return finalTraces;
        }

        if (!data || !xAccessor || !yAccessor) return [];
        
        const sortedData = table.getRowModel().rows.map(row => row.original);
        const xValues = sortedData.map(d => d[xAccessor]);
        const yValues = sortedData.map(d => d[yAccessor]);
        
        const finalTraces = [{
            x: xValues, 
            y: yValues, 
            type: chartType === 'line' ? 'scatter' : 'bar', // Use 'scatter' for line charts and 'bar' for bar charts
            mode: chartType === 'line' ? (showDataLabels ? 'lines+markers+text' : 'lines+markers') : undefined,
            name: yAxisTitle,
            marker: { color: baseBarColor },
            // Always show text labels for both chart types if enabled
            text: yValues.map(y => y.toLocaleString()),
            // For line charts: position above, for bar charts: use barLabelPosition
            textposition: chartType === 'line' ? 'top center' : barLabelPosition,
            // Always apply the anchor for bar charts
            insidetextanchor: barLabelInsideAnchor,
            // Control text visibility based on chart type and settings
            textinfo: chartType === 'bar' ? (showBarLabels ? 'text' : 'none') : undefined,
            textfont: {
                // For line charts: use dataLabelFontColor, for bar charts: use barLabelFontColor
                color: chartType === 'line' ? dataLabelFontColor : barLabelFontColor,
                size: 12
            },
        }];

        if (showAverageLine && yValues.length > 1) {
            const average = yValues.reduce((a, b) => a + b, 0) / yValues.length;
            finalTraces.push({
                x: [xValues[0], xValues[xValues.length - 1]], y: [average, average],
                type: 'scatter', mode: 'lines', name: `Average`,
                line: { color: '#ff7f0e', dash: 'dash' }, hoverinfo: 'name',
            });
        }
        if (showTrendLine && yValues.length > 1) {
            const n = yValues.length;
            const xIndices = Array.from({length: n}, (_, i) => i);
            const sumX = xIndices.reduce((a, b) => a + b, 0);
            const sumY = yValues.reduce((a, b) => a + b, 0);
            const sumXY = xIndices.map((xi, i) => xi * yValues[i]).reduce((a, b) => a + b, 0);
            const sumXX = xIndices.map(xi => xi * xi).reduce((a, b) => a + b, 0);
            const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
            const intercept = (sumY - slope * sumX) / n;
            const trendY = xIndices.map(xi => slope * xi + intercept);
            finalTraces.push({
                x: xValues, y: trendY, type: 'scatter', mode: 'lines',
                name: 'Trend', line: { color: '#d62728', shape: 'spline' }
            });
        }
        
        return finalTraces;
    }, [traces, chartType, data, xAccessor, yAccessor, table, sorting, baseBarColor, yAxisTitle, showTrendLine, showAverageLine]);

    // Handle row selection
    const handleRowSelect = useCallback((index) => {
        // Skip selection if disableSelection is true or for specific chart IDs
        if (disableSelection || id === 'chartPSCWeekdayActivity' || id === 'chartPSCWeekdayByDayActivity') {
            return;
        }
        
        setSelectedIndices(prev => {
            const newSet = new Set(prev);
            if (newSet.has(index)) {
                newSet.delete(index);
            } else {
                newSet.add(index);
            }
            return newSet;
        });
    }, [disableSelection, id]);

    // Handle chart hover events
    const handleChartHover = useCallback((data) => {
        if (disableHighlighting) return;
        if (!data || !data.points || data.points.length === 0) {
            setHighlightedIndex(null);
            return;
        }
        const pointIndex = data.points[0].pointIndex;
        setHighlightedIndex(pointIndex);
    }, [disableHighlighting]);

    // Handle mouse leave events
    const handleLeave = useCallback(() => {
        setHighlightedIndex(null);
        setHighlightedCurve(null);
    }, []);

    // Handle row hover events
    const handleRowHover = useCallback((index) => {
        if (disableHighlighting) return;
        setHighlightedIndex(index);
        setHighlightedCurve(null);
    }, [disableHighlighting]);

    // Handle CSV export
    const handleExportCsv = useCallback(() => {
        if (!data || !Array.isArray(data) || data.length === 0) return;
        
        const ws = XLSX.utils.json_to_sheet(data);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, "Data");
        
        const fileName = `${chartTitle || 'chart_data'}_export_${new Date().toISOString().slice(0,10)}.xlsx`;
        XLSX.writeFile(wb, fileName);
    }, [data, chartTitle]);
    
    // Handle PNG export
    const handleExportPng = useCallback(() => {
        if (!chartRef.current) return;
        
        Plotly.downloadImage(chartRef.current, {
            format: 'png',
            filename: `${chartTitle || 'chart'}_${new Date().toISOString().slice(0,10)}`,
            height: 800,
            width: 1200
        });
    }, [chartRef, chartTitle]);

    // Calculate chart panel style based on splitter position and table visibility
    // When table is hidden, maintain the same height but use full width
    const chartPanelStyle = hideSplitter || !tableVisible 
        ? { width: '100%', height: '100%' } 
        : { width: `${splitPos}%`, flexShrink: 0 };
    
    return (
        <div className="w-full h-full flex flex-col">
            <Toolbar 
                chartType={chartType} 
                setChartType={setChartType} 
                onExportCsv={handleExportCsv} 
                onExportPng={handleExportPng} 
                showChartTypeSwitcher={showChartTypeSwitcher}
                tableVisible={tableVisible}
                onToggleTable={() => setTableVisible(prev => !prev)}
                showTableToggle={showTableToggle}
            />
            <div 
                ref={containerRef} 
                className="relative flex flex-grow overflow-hidden"
                style={{ 
                    minHeight: '450px',
                    flexDirection: splitterOrientation === 'vertical' ? 'row' : 'column'
                }}
            >
                {/* Chart Panel */}
                <div 
                    style={{ 
                        [splitterOrientation === 'vertical' ? 'width' : 'height']: !tableVisible || hideSplitter ? '100%' : `${splitPos}%`,
                        overflow: 'hidden',
                        display: 'flex',
                        flexDirection: 'column'
                    }} 
                    className="relative flex-shrink-0"
                >
                    <Chart
                        chartRef={chartRef}
                        traces={chartTraces}
                        layout={{
                            title: { text: chartTitle },
                            xaxis: { title: xAxisTitle, type: xAxisType, tickangle: xAxisTickAngle },
                            yaxis: { title: yAxisTitle, tickformat: ',d' },
                            ...chartLayout
                        }}
                        barMode={barMode}
                        highlightedIndex={highlightedIndex}
                        highlightedCurve={highlightedCurve}
                        selectedIndices={Array.from(selectedIndices)}
                        onHover={handleChartHover}
                        onLeave={handleLeave}
                        onSelect={handleRowSelect}
                    />
                </div>
                
                {/* Splitter - rendered between chart and table */}
                {tableVisible && !hideSplitter && (
                    <div 
                        id="splitter" 
                        onMouseDown={handleMouseDown}
                        style={{
                            cursor: splitterOrientation === 'vertical' ? 'col-resize' : 'row-resize',
                            background: '#d1d5db', // Use a neutral gray for a subtle look
                            width: splitterOrientation === 'vertical' ? '10px' : '100%',
                            height: splitterOrientation === 'vertical' ? '100%' : '10px',
                            flexShrink: 0,
                            zIndex: 20,
                        }}
                        className="hover:bg-orange-500 transition-colors"
                    />
                )}
                
                {/* Table Panel */}
                {tableVisible && !hideSplitter && (
                    <div 
                        style={{ 
                            [splitterOrientation === 'vertical' ? 'width' : 'height']: `${100 - splitPos}%`,
                            overflow: 'auto'
                        }} 
                        className="flex-shrink-0"
                    >
                        <Table 
                            table={table}
                            highlightedIndex={highlightedIndex}
                            onRowHover={handleRowHover}
                            onRowLeave={handleLeave}
                            selectedIndices={selectedIndices}
                            onRowSelect={handleRowSelect}
                            showPagination={showPagination}
                        />
                    </div>
                )}
            </div>
        </div>
    );
}



// ===== C:\Users\mhali\OneDrive\Documents\NewDashboard\my-dashboard\src\components\Layout.jsx =====
import { Outlet, NavLink } from 'react-router-dom';
import { useLayout } from '../contexts/LayoutContext';

export default function Layout() {
  const { title } = useLayout();
  return (
    <div className="min-h-screen bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100">
      <header className="p-4 flex justify-between items-center border-b">
        <h1 className="text-2xl font-bold">{title}</h1>
        <nav className="space-x-4">
          <NavLink
            to="/"
            end
            className={({ isActive }) =>
              isActive ? 'font-semibold text-blue-500 dark:text-blue-400' : ''
            }
          >
            Home
          </NavLink>
          <NavLink
            to="/uniquepermits"
            title="Unique Permits Analysis"
            className={({ isActive }) =>
              isActive ? 'font-semibold text-blue-500 dark:text-blue-400' : ''
            }
          >
            Permits Analysis
          </NavLink>
          <NavLink
            to="/deptactivity"
            title="Department Activity Analysis"
            className={({ isActive }) =>
              isActive ? 'font-semibold text-blue-500 dark:text-blue-400' : ''
            }
          >
            Dept Activity
          </NavLink>
        </nav>
      </header>
      <main className="p-4">
        <Outlet />
      </main>
    </div>
  )
}



// ===== C:\Users\mhali\OneDrive\Documents\NewDashboard\my-dashboard\src\components\ChartTableComponent\Chart.jsx =====
// ===== C:\Users\mhali\OneDrive\Documents\NewDashboard\my-dashboard\src\components\ChartTableComponent\Chart.jsx =====
// src/components/ChartTableComponent/Chart.jsx

import React, { useEffect, useMemo, useCallback } from 'react';
import Plotly from 'plotly.js-dist-min';

export default function Chart({ 
    chartRef, 
    traces, 
    layout: chartLayout = {}, 
    onHover, 
    onLeave, 
    onSelect, 
    highlightedIndex, 
    highlightedCurve, 
    selectedIndices = [], 
    splitPos, 
    xAxisTickAngle,
    chartTitle
}) {
    // Memoize layout and config to prevent unnecessary chart re-renders
    const layout = useMemo(() => ({
        hovermode: 'closest',
        barmode: 'group',
        ...chartLayout,
        // Always show chart title with fallback for undefined
        title: {
            text: chartTitle || chartLayout.title?.text || '',
            font: {
                size: 18,
                color: document.body.classList.contains('dark') ? '#FFF' : '#333',
                family: 'Arial, sans-serif',
                weight: 'bold'
            },
            xref: 'paper',
            x: 0.5, // Center the title
            xanchor: 'center',
            y: 1,
            yanchor: 'top',
            pad: { t: 15 }
        },
        xaxis: { automargin: true, type: 'category', ...chartLayout.xaxis, tickangle: xAxisTickAngle },
        yaxis: { automargin: true, fixedrange: true, rangemode: 'tozero', ...(chartLayout.yaxis?.range ? { autorange: false } : { autorange: true }), ...chartLayout.yaxis },
        margin: { t: chartTitle ? 70 : 50, r: 20, b: 80, l: 60, ...chartLayout.margin }, // Increase top margin if title exists
        paper_bgcolor: 'rgba(0,0,0,0)',
        plot_bgcolor: 'rgba(0,0,0,0)',
        font: { color: document.body.classList.contains('dark') ? '#FFF' : '#000' },
        legend: { itemclick: 'toggle', itemdoubleclick: false, ...chartLayout.legend },
        autosize: true,
    }), [chartLayout, xAxisTickAngle, chartTitle]);

    const config = useMemo(() => ({ responsive: true, displayModeBar: false }), []);

    // Main effect to update the chart when data or interactions change
    useEffect(() => {
        if (chartRef.current && traces) {
            // Create a new array of traces with updated colors
            const updatedTraces = traces.map((trace, traceIndex) => {
                const newTrace = { ...trace, marker: { ...trace.marker } };

                // Ensure there is data to process
                if (!Array.isArray(newTrace.y)) return newTrace;

                // This logic now correctly determines the color for each bar on every render
                newTrace.marker.color = newTrace.y.map((_, i) => {
                    const originalColor = Array.isArray(trace.marker?.color)
                        ? trace.marker.color[i]
                        : trace.marker?.color || '#3498db';

                    // Priority 1: Selected
                    if (selectedIndices.includes(i)) {
                        return '#e60000'; // Bright Red for selected
                    }
                    
                    // Priority 2: Highlighted
                    if (highlightedIndex === i && (highlightedCurve === null || highlightedCurve === traceIndex)) {
                        return '#ff9933'; // Bright Orange for highlight
                    }
                    
                    // Default color
                    return originalColor;
                });
                return newTrace;
            });

            Plotly.react(chartRef.current, updatedTraces, layout, config);
        }
    }, [traces, layout, config, highlightedIndex, highlightedCurve, selectedIndices]);

    // Effect to set up event listeners. Wrapped in useCallback in parent, so this runs once.
    useEffect(() => {
        const plot = chartRef.current;
        if (plot) {
            const handleHover = (eventData) => {
                if (onHover && eventData.points.length > 0) {
                    const point = eventData.points[0];
                    onHover(point.pointIndex, point.curveNumber);
                }
            };
            const handleClick = (e) => {
                if (onSelect && e.points.length > 0) {
                    onSelect(e.points[0].pointIndex);
                }
            }

            plot.on('plotly_hover', handleHover);
            plot.on('plotly_unhover', onLeave);
            plot.on('plotly_click', handleClick);
            
            return () => {
                if (plot.removeAllListeners) {
                    plot.removeAllListeners();
                }
            };
        }
    }, [chartRef, onHover, onLeave, onSelect]);

    // Effect to resize chart when splitter moves
    useEffect(() => {
        if (chartRef.current) {
            Plotly.Plots.resize(chartRef.current);
        }
    }, [splitPos]);

    return <div ref={chartRef} className="w-full h-full"></div>;
}


// ===== C:\Users\mhali\OneDrive\Documents\NewDashboard\my-dashboard\src\components\ChartTableComponent\Table.jsx =====
// src/components/ChartTableComponent/Table.jsx

import React from 'react';
import { flexRender } from '@tanstack/react-table';
import TablePagination from './TablePagination';

export default function Table({ 
    table, 
    highlightedIndex, 
    onRowHover, 
    onRowLeave,
    selectedIndices = [],
    onRowSelect,
    onSort, // New prop for handling sort events
    showPagination = false // New prop to control pagination visibility
}) {
    console.log('Table component - table:', table);
    console.log('Table component - rows:', table?.getRowModel()?.rows);
    console.log('Table component - headers:', table?.getHeaderGroups());
    return (
        <div className="flex flex-col h-full">
            <div className="overflow-auto h-[450px]">
                <table className="min-w-full text-sm text-gray-700 dark:text-gray-300">
                    <thead className="bg-gray-100 dark:bg-gray-700 sticky top-0">
                        {table.getHeaderGroups().map(headerGroup => (
                            <tr key={headerGroup.id}>
                                {headerGroup.headers.map(header => (
                                    <th key={header.id} scope="col" className="p-3">
                                        <div 
                                            onClick={(e) => {
                                                // Get the original handler
                                                const originalHandler = header.column.getToggleSortingHandler();
                                                // Call it to toggle sorting with the event
                                                if (originalHandler) {
                                                    originalHandler(e);
                                                }
                                                // Then call our custom onSort handler if provided
                                                if (onSort) {
                                                    onSort();
                                                }
                                            }} 
                                            className="cursor-pointer select-none"
                                        >
                                            {flexRender(header.column.columnDef.header, header.getContext())}
                                            {{ asc: ' ▲', desc: ' ▼' }[header.column.getIsSorted()] ?? null}
                                        </div>
                                    </th>
                                ))}
                            </tr>
                        ))}
                    </thead>
                    <tbody>
                        {table.getRowModel().rows.map((row, index) => (
                            <tr 
                                key={row.id} 
                                className={`border-b dark:border-gray-700 hover:bg-emerald-100 dark:hover:bg-emerald-800/50 transition-colors duration-200 cursor-pointer
                                    ${highlightedIndex === index ? '!bg-emerald-200 dark:!bg-emerald-700/70 font-medium' : ''}
                                    ${Array.isArray(selectedIndices) && selectedIndices.includes(index) ? '!bg-emerald-300 dark:!bg-emerald-600/60' : ''}
                                `}
                                onMouseEnter={() => onRowHover && onRowHover(index)}
                                onMouseLeave={() => onRowLeave && onRowLeave()}
                                onClick={() => onRowSelect && onRowSelect(index, false)}
                                onDoubleClick={() => onRowSelect && onRowSelect(index, true)}
                            >
                                {row.getVisibleCells().map(cell => (
                                    <td key={cell.id} className={`p-3 ${cell.column.columnDef.meta?.className}`}>
                                        {flexRender(cell.column.columnDef.cell, cell.getContext())}
                                    </td>
                                ))}
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
            {showPagination && <TablePagination table={table} />}
        </div>
    );
}


// ===== C:\Users\mhali\OneDrive\Documents\NewDashboard\my-dashboard\src\components\ChartTableComponent\TablePagination.jsx =====
// src/components/ChartTableComponent/TablePagination.jsx

import React from 'react';

export default function TablePagination({ table }) {
    return (
        <div className="flex items-center justify-between px-4 py-2 bg-gray-50 dark:bg-gray-700/50 border-t border-gray-200 dark:border-gray-700">
            <div className="flex items-center text-sm text-gray-700 dark:text-gray-300">
                <span>
                    Page{' '}
                    <strong>
                        {table.getState().pagination.pageIndex + 1} of{' '}
                        {table.getPageCount()}
                    </strong>
                </span>
            </div>
            <div className="flex items-center space-x-2">
                <button
                    className="px-2 py-1 text-sm bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded hover:bg-gray-100 dark:hover:bg-gray-700 disabled:opacity-50"
                    onClick={() => table.setPageIndex(0)}
                    disabled={!table.getCanPreviousPage()}
                >
                    {'<<'}
                </button>
                <button
                    className="px-2 py-1 text-sm bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded hover:bg-gray-100 dark:hover:bg-gray-700 disabled:opacity-50"
                    onClick={() => table.previousPage()}
                    disabled={!table.getCanPreviousPage()}
                >
                    {'<'}
                </button>
                <button
                    className="px-2 py-1 text-sm bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded hover:bg-gray-100 dark:hover:bg-gray-700 disabled:opacity-50"
                    onClick={() => table.nextPage()}
                    disabled={!table.getCanNextPage()}
                >
                    {'>'}
                </button>
                <button
                    className="px-2 py-1 text-sm bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded hover:bg-gray-100 dark:hover:bg-gray-700 disabled:opacity-50"
                    onClick={() => table.setPageIndex(table.getPageCount() - 1)}
                    disabled={!table.getCanNextPage()}
                >
                    {'>>'}
                </button>
            </div>
        </div>
    );
}


// ===== C:\Users\mhali\OneDrive\Documents\NewDashboard\my-dashboard\src\components\ChartTableComponent\Toolbar.jsx =====
// src/components/ChartTableComponent/Toolbar.jsx

import React from 'react';
import { FiBarChart } from "react-icons/fi";
import { RiLineChartLine } from "react-icons/ri";
import { TbTableDown } from "react-icons/tb";
import { GoDownload } from "react-icons/go";
import { TbTableOff } from "react-icons/tb";
import { GrTable } from "react-icons/gr";

export default function Toolbar({ chartType, setChartType, onExportCsv, onExportPng, showChartTypeSwitcher = true, tableVisible = true, onToggleTable, showTableToggle = true }) {
    return (
        <div className="flex items-center justify-end mb-4">
            {/* All buttons grouped on the right side */}
            <div className="flex items-center gap-2">
                {/* Chart Type Switcher - only shown if showChartTypeSwitcher is true */}
                {showChartTypeSwitcher && (
                    <div className="p-1 bg-gray-200 dark:bg-gray-700 rounded-lg flex items-center">
                        <button id='btnBarChart' 
                            onClick={() => setChartType('bar')} 
                            data-tooltip-target="tooltip-bar-chart"
                            className={`p-2 text-sm rounded-md flex items-center justify-center ${chartType === 'bar' ? 'bg-white dark:bg-gray-900 shadow' : ''}`}
                        >
                            <FiBarChart className="text-lg" />
                            <span id="tooltip-bar-chart" role="tooltip" className="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700">
                                Bar Chart
                                <div className="tooltip-arrow" data-popper-arrow></div>
                            </span>
                        </button>
                        <button id='btnLineChart'   
                            onClick={() => setChartType('line')} 
                            data-tooltip-target="tooltip-line-chart"
                            className={`p-2 text-sm rounded-md flex items-center justify-center ${chartType === 'line' ? 'bg-white dark:bg-gray-900 shadow' : ''}`}
                        >
                            <RiLineChartLine className="text-lg" />
                            <span id="tooltip-line-chart" role="tooltip" className="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700">
                                Line Chart
                                <div className="tooltip-arrow" data-popper-arrow></div>
                            </span>
                        </button>
                    </div>
                )}
                
                {/* Table Toggle Button - only shown if showTableToggle is true */}
                {showTableToggle && (
                    <button
                        onClick={onToggleTable}
                        data-tooltip-target="tooltip-toggle-table"
                        className="p-2 text-sm rounded-lg bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 flex items-center justify-center"
                    >
                        {tableVisible ? <TbTableOff className="text-lg" /> : <GrTable className="text-lg" />}
                        <span id="tooltip-toggle-table" role="tooltip" className="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700">
                            {tableVisible ? "Hide Table" : "Show Table"}
                            <div className="tooltip-arrow" data-popper-arrow></div>
                        </span>
                    </button>
                )}
                
                {/* Export Buttons */}
                <button id='btnExportCsv'
                    onClick={onExportCsv}
                    data-tooltip-target="tooltip-export-xlsx"
                    className="p-2 text-sm rounded-lg bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 flex items-center justify-center"
                >
                    <TbTableDown className="text-lg" />
                    <span id="tooltip-export-xlsx" role="tooltip" className="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700">
                        Export XLSX
                        <div className="tooltip-arrow" data-popper-arrow></div>
                    </span>
                </button>
                <button id='btnExportPng'
                    onClick={onExportPng}
                    data-tooltip-target="tooltip-export-png"
                    className="p-2 text-sm rounded-lg bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 flex items-center justify-center"
                >
                    <GoDownload className="text-lg" />
                    <span id="tooltip-export-png" role="tooltip" className="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700">
                        Export PNG
                        <div className="tooltip-arrow" data-popper-arrow></div>
                    </span>
                </button>
            </div>
        </div>
    );
}


// ===== C:\Users\mhali\OneDrive\Documents\NewDashboard\my-dashboard\src\components\ChartTableComponent\useChartTableLogic.jsx =====
// src/hooks/useChartTableLogic.jsx

import { useState, useRef, useEffect, useCallback, useMemo } from 'react';
import { useDraggableSplitter } from './useDraggableSplitter.js';
import Plotly from 'plotly.js-dist-min';
import {
    useReactTable,
    getCoreRowModel,
    getSortedRowModel,
    getPaginationRowModel,
} from '@tanstack/react-table';
import * as XLSX from 'xlsx';

export function useChartTableLogic({
    data,
    columns,
    initialTraces,
    xAccessor,
    yAccessor,
    splitterOrientation,
    initialSplitPos,
    chartType: propChartType,
    chartTitle,
    yAxisTitle,
    baseBarColor,
}) {
    const [chartType, setChartType] = useState(propChartType || 'bar');
    const [sorting, setSorting] = useState([]);
    const chartRef = useRef(null);
    const containerRef = useRef(null);

    const { splitPos, isDragging, handleMouseDown } = useDraggableSplitter(
        containerRef,
        initialSplitPos,
        splitterOrientation,
    );

    const table = useReactTable({
        data: data || [],
        columns: columns || [],
        state: { sorting },
        onSortingChange: setSorting,
        getCoreRowModel: getCoreRowModel(),
        getSortedRowModel: getSortedRowModel(),
        getPaginationRowModel: getPaginationRowModel(),
    });

    const chartTraces = useMemo(() => {
        // If pre-configured traces are provided (like for grouped charts), use them.
        if (initialTraces) {
            // ONLY transform them if the chart type is switched to 'line'.
            if (chartType === 'line') {
                return initialTraces.map(trace => ({
                    ...trace,
                    type: 'scatter', // In Plotly, 'line' is a mode of 'scatter'
                    mode: 'lines+markers',
                }));
            }
            // IMPORTANT: If the chart type is 'bar', return the traces exactly as they were provided.
            return initialTraces;
        }

        // Fallback for simple charts without pre-configured traces.
        if (!data || !xAccessor || !yAccessor) return [];

        const sortedData = table.getRowModel().rows.map(row => row.original);
        return [{
            x: sortedData.map(d => d[xAccessor]),
            y: sortedData.map(d => d[yAccessor]),
            type: chartType,
            mode: chartType === 'line' ? 'lines+markers' : undefined,
            name: yAxisTitle || 'Data',
            marker: { color: baseBarColor || '#3498db' },
        }];
    }, [initialTraces, chartType, data, xAccessor, yAccessor, table, sorting, yAxisTitle, baseBarColor]);

    const handleExportCsv = useCallback(() => {
        const rows = table.getCoreRowModel().rows.map(row => row.original);
        if (rows.length > 0) {
            const worksheet = XLSX.utils.json_to_sheet(rows);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');
            XLSX.writeFile(workbook, `${chartTitle || 'data'}.xlsx`);
        }
    }, [table, chartTitle]);

    const handleExportPng = useCallback(() => {
        if (chartRef.current) {
            Plotly.toImage(chartRef.current, { format: 'png', height: 600, width: 900 })
                .then(url => {
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `${chartTitle || 'chart'}.png`;
                    a.click();
                });
        }
    }, [chartRef, chartTitle]);
    
    const refreshChart = useCallback(() => {}, []);

    return {
        chartType, setChartType, table, chartTraces, chartRef,
        handleExportCsv, handleExportPng, refreshChart,
        containerRef, splitPos, isDragging, handleMouseDown,
    };
}


// ===== C:\Users\mhali\OneDrive\Documents\NewDashboard\my-dashboard\src\components\common\MultiSelectDropdown.jsx =====
// src/components/common/MultiSelectDropdown.jsx

import React, { useState, useRef, useEffect } from 'react';
import { FaChevronDown, FaChevronUp } from 'react-icons/fa'; // Icons for dropdown toggle

/**
 * A customizable multi-select dropdown component with checkboxes.
 *
 * @param {object} props - Component props.
 * @param {string} props.label - The label displayed on the dropdown button.
 * @param {Array<Object>} props.options - An array of objects: [{ label: 'Option Text', value: 'optionValue' }].
 * @param {Array<any>} props.selectedValues - An array of the currently selected values.
 * @param {function(any, boolean): void} props.onChange - Callback function: (value, isChecked) => void.
 * @param {string} [props.buttonClasses=''] - Additional Tailwind CSS classes for the dropdown button.
 * @param {string} [props.dropdownClasses=''] - Additional Tailwind CSS classes for the dropdown menu.
 */
export default function MultiSelectDropdown({
  label,
  options,
  selectedValues,
  onChange,
  buttonClasses = '',
  dropdownClasses = '',
}) {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef(null);
  const buttonRef = useRef(null);

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target) &&
        buttonRef.current &&
        !buttonRef.current.contains(event.target)
      ) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const handleCheckboxChange = (optionValue, isChecked) => {
    onChange(optionValue, isChecked);
  };

  // Determine button text based on selection
  const getButtonText = () => {
    if (!selectedValues || selectedValues.length === 0) {
      return `${label}: All`;
    }
    if (selectedValues.length === options.length) {
      return `${label}: All (${options.length})`;
    }
    if (selectedValues.length === 1) {
      const selectedOption = options.find(opt => opt.value === selectedValues[0]);
      return `${label}: ${selectedOption ? selectedOption.label : '1 Selected'}`;
    }
    return `${label}: ${selectedValues.length} Selected`;
  };

  return (
    <div className="relative inline-block w-full text-left">
      <div>
        <button
          ref={buttonRef}
          type="button"
          className={`inline-flex justify-between items-center w-full px-3 py-2 text-sm font-medium border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500
            dark:border-gray-600 dark:bg-gray-700 dark:hover:bg-gray-600 dark:focus:ring-blue-500 ${buttonClasses}`}
          id="multi-select-menu-button"
          aria-expanded={isOpen}
          aria-haspopup="true"
          onClick={() => setIsOpen(!isOpen)}
        >
          {getButtonText()}
          {isOpen ? (
            <FaChevronUp className="-mr-1 ml-2 h-3 w-3" aria-hidden="true" />
          ) : (
            <FaChevronDown className="-mr-1 ml-2 h-3 w-3" aria-hidden="true" />
          )}
        </button>
      </div>

      {isOpen && (
        <div
          ref={dropdownRef}
          className={`origin-top-right absolute right-0 mt-2 w-full rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-30 max-h-60 overflow-y-auto
            dark:bg-gray-800 dark:ring-gray-700 ${dropdownClasses}`}
          role="menu"
          aria-orientation="vertical"
          aria-labelledby="multi-select-menu-button"
        >
          <div className="py-1" role="none">
            {options.map(option => (
              <label
                key={option.value}
                htmlFor={`checkbox-${option.value}`}
                className="flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer"
                role="menuitem"
              >
                <input
                  id={`checkbox-${option.value}`}
                  type="checkbox"
                  className="form-checkbox h-4 w-4 text-blue-600 transition duration-150 ease-in-out dark:bg-gray-700 dark:border-gray-600 dark:checked:bg-blue-600"
                  checked={selectedValues.includes(option.value)}
                  onChange={(e) => handleCheckboxChange(option.value, e.target.checked)}
                />
                <span className="ml-2">{option.label}</span>
              </label>
            ))}
            {options.length === 0 && (
              <div className="px-4 py-2 text-sm text-gray-500 dark:text-gray-400">No options available</div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}


// ===== C:\Users\mhali\OneDrive\Documents\NewDashboard\my-dashboard\src\components\DeptActivity\LUActivityReport.jsx =====
import React, { useMemo, useEffect, useState } from 'react';
import { useLayout } from '../../contexts/LayoutContext';
import { updateTitle } from '../../utils/titleManager';
import ChartTableComponent from '../../components/ChartTableComponent';
import { createColumnHelper } from '@tanstack/react-table'; // Import helper

const columnHelper = createColumnHelper(); // Create an instance of the helper

export default function LUActivityReport({ data, isLoading }) {
    const { setTitle } = useLayout();
    const [weekdayData, setWeekdayData] = useState([]);
    const [isLoadingWeekdayData, setIsLoadingWeekdayData] = useState(true);
    const luPalette = [
        'rgb(75, 150, 125)', 'rgb(122, 137, 156)', 'rgb(95, 163, 95)',
        'rgb(92, 105, 117)', 'rgb(101, 155, 177)', 'rgb(72, 209, 204)',
        'rgb(95, 158, 160)', 'rgb(70, 130, 180)', 'rgb(100, 149, 237)',
        'rgb(125, 159, 163)', 'rgb(0, 206, 209)', 'rgb(32, 178, 170)'
    ]; // LU Theme - RGB format
    
    // Set the page title when component mounts
    useEffect(() => {
        updateTitle('LUActivityReport', setTitle);
        return () => setTitle('My Dashboard');
    }, [setTitle]);
    
    // Fetch weekday data
    useEffect(() => {
        const fetchWeekdayData = async () => {
            try {
                const response = await fetch('./data/UniquePermitsAnalysisData/DeptAnnualActivityWeekdayJson.json');
                if (!response.ok) {
                    throw new Error('Failed to fetch weekday data');
                }
                const allData = await response.json();
                // Filter for LU department only
                const luData = allData.filter(item => item.department === 'LU');
                setWeekdayData(luData);
            } catch (error) {
                console.error('Error fetching weekday data:', error);
            } finally {
                setIsLoadingWeekdayData(false);
            }
        };
        
        fetchWeekdayData();
    }, []);
    
    console.log('LUActivityReport - data:', data);
    console.log('LUActivityReport - isLoading:', isLoading);
    console.log('LUActivityReport - weekdayData:', weekdayData);
    // Define columns for the activity table using modern v8 syntax
    const columns = useMemo(() => [
        {
            header: () => <div className="text-center">Year</div>,
            accessorKey: 'year',
            id: 'year',
            sortingFn: 'basic',
            cell: info => <div className="text-center">{info.getValue()}</div>
        },
        {
            header: () => <div className="text-center">Activity Count</div>,
            accessorKey: 'activity_count',
            id: 'activity_count',
            sortingFn: 'basic',
            cell: info => <div className="text-center">{info.getValue().toLocaleString()}</div>
        }
    ], []);
    
    // Define columns for the weekday table
    const weekdayColumns = useMemo(() => [
        columnHelper.accessor('year', {
            header: 'Fiscal Year',
            cell: info => info.getValue()
        }),
        columnHelper.accessor('monday', {
            header: 'Monday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('tuesday', {
            header: 'Tuesday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('wednesday', {
            header: 'Wednesday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('thursday', {
            header: 'Thursday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('friday', {
            header: 'Friday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        })
    ], []);

    // Create traces for the activity chart
    const traces = useMemo(() => {
        if (!data || !Array.isArray(data) || data.length === 0) {
            console.log('LUActivityReport - No data available for traces');
            return [];
        }

        // Sort data by year
        const sortedData = [...data].sort((a, b) => a.year - b.year);
        console.log('LUActivityReport - Sorted data for traces:', sortedData);
        
        return [{
            x: sortedData.map(item => item.year),
            y: sortedData.map(item => item.activity_count),
            type: 'bar',
            name: 'LU Activity',
            marker: { color: luPalette[0] }, // Use first color of Sunset Orange Theme
            text: sortedData.map(item => item.activity_count.toLocaleString()),
            textposition: 'inside',
            insidetextanchor: 'middle',
            textfont: {
                color: 'white',
                size: 12
            },
            hovertemplate: '<b>Year: %{x}</b><br>Activity Count: %{y:,}<extra></extra>'
        }];
    }, [data, luPalette]);
    
    // Create traces for the weekday chart
    const weekdayTraces = useMemo(() => {
        if (!weekdayData || !Array.isArray(weekdayData) || weekdayData.length === 0) {
            console.log('LUActivityReport - No weekday data available for traces');
            return [];
        }

        // Sort data by year
        const sortedData = [...weekdayData].sort((a, b) => a.year - b.year);
        
        // Create a trace for each weekday
        const weekdays = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'];
        // Theme 5: Ocean & Cool - Replaced by luPalette
        // const colors = ['#03045e', '#0077b6', '#00b4d8', '#48cae4', '#90e0ef'];
        const weekdayLabels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'];
        
        return weekdays.map((day, index) => ({
            x: sortedData.map(item => item.year),
            y: sortedData.map(item => item[day]), // Keep as decimal for Plotly
            type: 'bar',
            name: weekdayLabels[index],
            marker: { color: luPalette[index % luPalette.length] },
            text: sortedData.map(item => `${(item[day] * 100).toFixed(1)}%`),
            textposition: 'inside',
            insidetextanchor: 'middle',
            textangle: -90,
            textfont: {
                size: 10,
                color: 'white'
            },
            hovertemplate: '<b>Year: %{x}</b><br>' + weekdayLabels[index] + ': %{text}<extra></extra>'
        }));
    }, [weekdayData, luPalette]);
    
    // Create traces for the weekday chart (grouped by day)
    const weekdayByDayTraces = useMemo(() => {
        if (!weekdayData || !Array.isArray(weekdayData) || weekdayData.length === 0) {
            console.log('LUActivityReport - No weekday data available for day-grouped traces');
            return [];
        }

        // Sort data by year
        const sortedData = [...weekdayData].sort((a, b) => a.year - b.year);
        
        // Create a trace for each year
        return sortedData.map((yearData, index) => ({
            x: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],
            y: [
                yearData.monday,
                yearData.tuesday,
                yearData.wednesday,
                yearData.thursday,
                yearData.friday
            ],
            type: 'bar',
            name: `${yearData.year}`,
            marker: { color: luPalette[index % luPalette.length] },
            text: [
                `${(yearData.monday * 100).toFixed(1)}%`,
                `${(yearData.tuesday * 100).toFixed(1)}%`,
                `${(yearData.wednesday * 100).toFixed(1)}%`,
                `${(yearData.thursday * 100).toFixed(1)}%`,
                `${(yearData.friday * 100).toFixed(1)}%`
            ],
            textposition: 'inside',
            insidetextanchor: 'middle',
            textangle: -90,
            textfont: {
                size: 10,
                color: 'white'
            },
            hovertemplate: '<b>%{x}</b><br>Year: ' + yearData.year + '<br>Percentage: %{text}<extra></extra>'
        }));
    }, [weekdayData, luPalette]);
    
    // Define columns for the weekday by day table
    const weekdayByDayColumns = useMemo(() => [
        columnHelper.accessor('year', {
            header: 'Fiscal Year',
            cell: info => info.getValue()
        }),
        columnHelper.accessor('monday', {
            header: 'Monday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('tuesday', {
            header: 'Tuesday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('wednesday', {
            header: 'Wednesday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('thursday', {
            header: 'Thursday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('friday', {
            header: 'Friday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        })
    ], []);

    return (
        <div className="lu-activity-report space-y-8">
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
                <ChartTableComponent 
                    id='chartLUActivity'
                    initialTableWidth={250}
                    data={Array.isArray(data) ? data : []}
                    columns={columns}
                    isLoading={isLoading}
                    chartTitle="LU Department Activity by Year"
                    xAxisTitle="Year"
                    yAxisTitle="Activity Count"
                    traces={traces}
                    showTrendLine={true}
                    showAverageLine={true}
                    showBarLabels={true}
                    barLabelPosition="inside"
                    barLabelInsideAnchor="middle"
                    barLabelFontColor="white"
                    excelFileName="LUActivityReport.xlsx"
                    chartFileName="LUActivityReport.png"
                    excelSheetName="LU Activity"
                    showTablePanel={true}
                    initialSplitPos={70}
                    showPagination={false}
                    showChartTypeSwitcher={true}
                    chartType="bar"
                    showLineLabels={true}
                    chartLayout={{
                        legend: {
                            orientation: 'h',
                            y: -0.2
                        }
                    }}
                />
            </div>
            
            {/* Weekday Activity Chart - Grouped by Year */}
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
                <ChartTableComponent 
                    id='chartLUWeekdayActivity'
                    data={Array.isArray(weekdayData) ? weekdayData : []}
                    columns={weekdayColumns}
                    isLoading={isLoadingWeekdayData}
                    chartTitle="LU Data - Per Action (Weekdays) - Grouped by Year"
                    xAxisTitle="Year"
                    yAxisTitle="Percentage"
                    traces={weekdayTraces}
                    showTrendLine={false}
                    showAverageLine={false}
                    showBarLabels={true}
                    barLabelPosition="inside"
                    barMode="group"
                    excelFileName="LUWeekdayActivityReport.xlsx"
                    chartFileName="LUWeekdayActivityReport.png"
                    excelSheetName="LU Weekday Activity"
                    showTablePanel={true}
                    splitterOrientation="horizontal"
                    initialSplitPos={60}
                    showPagination={false}
                    showChartTypeSwitcher={false}
                    disableHighlighting={true}
                    disableSelection={true}
                    chartType="bar"
                    chartLayout={{
                        barmode: 'group',
                        yaxis: {
                            tickformat: '.0%',
                            range: [0, 0.7], // Set y-axis range from 0% to 70%
                        },
                        legend: {
                            orientation: 'h',
                            y: -0.2
                        }
                    }}
                />
            </div>
            
            {/* Weekday Activity Chart - Grouped by Day */}
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
                <ChartTableComponent 
                    id='chartLUWeekdayByDayActivity'
                    data={Array.isArray(weekdayData) ? weekdayData : []}
                    columns={weekdayByDayColumns}
                    isLoading={isLoadingWeekdayData}
                    chartTitle="LU Data - Per Action (Weekdays) - Grouped by Day"
                    xAxisTitle="Weekday"
                    yAxisTitle="Percentage"
                    traces={weekdayByDayTraces}
                    showTrendLine={false}
                    showAverageLine={false}
                    showBarLabels={true}
                    barLabelPosition="inside"
                    barMode="group"
                    excelFileName="LUWeekdayByDayActivityReport.xlsx"
                    chartFileName="LUWeekdayByDayActivityReport.png"
                    excelSheetName="LU Weekday By Day Activity"
                    showTablePanel={true}
                    splitterOrientation="horizontal"
                    initialSplitPos={60}
                    showPagination={false}
                    showChartTypeSwitcher={false}
                    disableHighlighting={true}
                    disableSelection={true}
                    chartType="bar"
                    chartLayout={{
                        barmode: 'group',
                        yaxis: {
                            tickformat: '.0%',
                            range: [0, 0.7], // Set y-axis range from 0% to 70%
                        },
                        legend: {
                            orientation: 'h',
                            y: -0.2
                        }
                    }}
                />
            </div>
        </div>
    );
}



// ===== C:\Users\mhali\OneDrive\Documents\NewDashboard\my-dashboard\src\components\DeptActivity\PLNCheckActivityReport.jsx =====
import React, { useMemo, useEffect, useState } from 'react';
import { useLayout } from '../../contexts/LayoutContext';
import { updateTitle } from '../../utils/titleManager';
import ChartTableComponent from '../../components/ChartTableComponent';
import { createColumnHelper } from '@tanstack/react-table';

const columnHelper = createColumnHelper();

export default function PLNCheckActivityReport({ data, isLoading }) {
    const { setTitle } = useLayout();
    const [weekdayData, setWeekdayData] = useState([]);
    const [isLoadingWeekdayData, setIsLoadingWeekdayData] = useState(true);
    const plnCheckPalette = [
        'rgb(168, 65, 27)', 'rgb(167, 103, 26)', 'rgb(175, 153, 28)',
        'rgb(93, 173, 12)', 'rgb(42, 170, 106)', 'rgb(0, 110, 146)',
        'rgba(39, 94, 150, 0.75)', 'rgb(138, 43, 226)', 'rgb(128, 15, 75)',
        'rgb(199, 21, 133)', 'rgb(220, 20, 60)', 'rgb(75, 0, 130)'
    ]; // PLN Check Theme - RGB format
    
    // Set the page title when component mounts
    useEffect(() => {
        updateTitle('PLNCheckActivityReport', setTitle);
        return () => setTitle('My Dashboard');
    }, [setTitle]);
    
    // Fetch weekday data
    useEffect(() => {
        const fetchWeekdayData = async () => {
            try {
                const response = await fetch('./data/UniquePermitsAnalysisData/DeptAnnualActivityWeekdayJson.json');
                if (!response.ok) {
                    throw new Error('Failed to fetch weekday data');
                }
                const allData = await response.json();
                // Filter for PLN Check department only
                const plnCheckData = allData.filter(item => item.department === 'PLN Check');
                setWeekdayData(plnCheckData);
            } catch (error) {
                console.error('Error fetching weekday data:', error);
            } finally {
                setIsLoadingWeekdayData(false);
            }
        };
        
        fetchWeekdayData();
    }, []);
    
    console.log('PLNCheckActivityReport - data:', data);
    console.log('PLNCheckActivityReport - isLoading:', isLoading);
    console.log('PLNCheckActivityReport - weekdayData:', weekdayData);
    // Define columns for the activity table using modern @tanstack/react-table v8 syntax
    const columns = useMemo(() => [
        {
            header: 'Year',
            accessorKey: 'year',
            id: 'year',
            sortingFn: 'basic',
            cell: info => info.getValue()
        },
        {
            header: 'Activity Count',
            accessorKey: 'activity_count',
            id: 'activity_count',
            sortingFn: 'basic',
            cell: info => <div className="text-center">{info.getValue().toLocaleString()}</div>
        }
    ], []);
    
    // Define columns for the weekday table
    const weekdayColumns = useMemo(() => [
        columnHelper.accessor('year', {
            header: 'Fiscal Year',
            cell: info => info.getValue()
        }),
        columnHelper.accessor('monday', {
            header: 'Monday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('tuesday', {
            header: 'Tuesday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('wednesday', {
            header: 'Wednesday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('thursday', {
            header: 'Thursday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('friday', {
            header: 'Friday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        })
    ], []);

    // Create traces for the activity chart
    const traces = useMemo(() => {
        if (!data || !Array.isArray(data) || data.length === 0) {
            console.log('PLNCheckActivityReport - No data available for traces');
            return [];
        }

        // Sort data by year
        const sortedData = [...data].sort((a, b) => a.year - b.year);
        
        return [{
            x: sortedData.map(item => item.year),
            y: sortedData.map(item => item.activity_count),
            type: 'bar',
            name: 'PLN Check Activity',
            marker: { color: plnCheckPalette[0] }, // Use first color of Forest Green Theme
            text: sortedData.map(item => item.activity_count.toLocaleString()),
            textposition: 'inside',
            insidetextanchor: 'middle',
            textfont: {
                color: 'white',
                size: 12
            },
            hovertemplate: '<b>Year: %{x}</b><br>Activity Count: %{y:,}<extra></extra>'
        }];
    }, [data, plnCheckPalette]);
    
    // Create traces for the weekday chart (grouped by year)
    const weekdayTraces = useMemo(() => {
        if (!weekdayData || !Array.isArray(weekdayData) || weekdayData.length === 0) {
            console.log('PLNCheckActivityReport - No weekday data available for traces');
            return [];
        }

        // Sort data by year
        const sortedData = [...weekdayData].sort((a, b) => a.year - b.year);
        
        // Create a trace for each weekday
        const weekdays = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'];
        // Theme 5: Ocean & Cool - Replaced by plnCheckPalette
        // const colors = ['#03045e', '#0077b6', '#00b4d8', '#48cae4', '#90e0ef'];
        const weekdayLabels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'];
        
        return weekdays.map((day, index) => ({
            x: sortedData.map(item => item.year),
            y: sortedData.map(item => item[day]), // Keep as decimal for Plotly
            type: 'bar',
            name: weekdayLabels[index],
            marker: { color: plnCheckPalette[index % plnCheckPalette.length] },
            text: sortedData.map(item => `${(item[day] * 100).toFixed(1)}%`),
            textposition: 'inside',
            insidetextanchor: 'middle',
            textangle: -90,
            textfont: {
                size: 10,
                color: 'white'
            },
            hovertemplate: '<b>Year: %{x}</b><br>' + weekdayLabels[index] + ': %{text}<extra></extra>'
        }));
    }, [weekdayData, plnCheckPalette]);
    
    // Create traces for the weekday chart (grouped by day)
    const weekdayByDayTraces = useMemo(() => {
        if (!weekdayData || !Array.isArray(weekdayData) || weekdayData.length === 0) {
            console.log('PLNCheckActivityReport - No weekday data available for day-grouped traces');
            return [];
        }

        // Sort data by year
        const sortedData = [...weekdayData].sort((a, b) => a.year - b.year);
        
        // Create a trace for each year
        return sortedData.map((yearData, index) => ({
            x: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],
            y: [
                yearData.monday,
                yearData.tuesday,
                yearData.wednesday,
                yearData.thursday,
                yearData.friday
            ],
            type: 'bar',
            name: `${yearData.year}`,
            marker: { color: plnCheckPalette[index % plnCheckPalette.length] },
            text: [
                `${(yearData.monday * 100).toFixed(1)}%`,
                `${(yearData.tuesday * 100).toFixed(1)}%`,
                `${(yearData.wednesday * 100).toFixed(1)}%`,
                `${(yearData.thursday * 100).toFixed(1)}%`,
                `${(yearData.friday * 100).toFixed(1)}%`
            ],
            textposition: 'inside',
            insidetextanchor: 'middle',
            textangle: -90,
            textfont: {
                size: 10,
                color: 'white'
            },
            hovertemplate: '<b>%{x}</b><br>Year: ' + yearData.year + '<br>Percentage: %{text}<extra></extra>'
        }));
    }, [weekdayData, plnCheckPalette]);
    
    // Define columns for the weekday by day table
    const weekdayByDayColumns = useMemo(() => [
        columnHelper.accessor('year', {
            header: 'Fiscal Year',
            cell: info => info.getValue()
        }),
        columnHelper.accessor('monday', {
            header: 'Monday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('tuesday', {
            header: 'Tuesday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('wednesday', {
            header: 'Wednesday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('thursday', {
            header: 'Thursday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('friday', {
            header: 'Friday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        })
    ], []);

    return (
        <div className="pln-check-activity-report space-y-8">
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
                <ChartTableComponent 
                    id='chartPLNCheckActivity'
                    initialTableWidth={250}
                    data={Array.isArray(data) ? data : []}
                    columns={columns}
                    isLoading={isLoading}
                    chartTitle="PLN Check Department Activity by Year"
                    xAxisTitle="Year"
                    yAxisTitle="Activity Count"
                    traces={traces}
                    showTrendLine={true}
                    showAverageLine={true}
                    showBarLabels={true}
                    barLabelPosition="inside"
                    barLabelInsideAnchor="middle"
                    barLabelFontColor="white"
                    excelFileName="PLNCheckActivityReport.xlsx"
                    chartFileName="PLNCheckActivityReport.png"
                    excelSheetName="PLN Check Activity"
                    showTablePanel={true}
                    initialSplitPos={70}
                    showPagination={false}
                    showChartTypeSwitcher={true}
                    chartType="bar"
                    showLineLabels={true}
                    chartLayout={{
                        legend: {
                            orientation: 'h',
                            y: -0.2
                        }
                    }}
                />
            </div>
            
            {/* Weekday Activity Chart - Grouped by Year */}
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
                <ChartTableComponent 
                    id='chartPLNCheckWeekdayActivity'
                    data={Array.isArray(weekdayData) ? weekdayData : []}
                    columns={weekdayColumns}
                    isLoading={isLoadingWeekdayData}
                    chartTitle="PLN Check Data - Per Action (Weekdays) - Grouped by Year"
                    xAxisTitle="Year"
                    yAxisTitle="Percentage"
                    traces={weekdayTraces}
                    showTrendLine={false}
                    showAverageLine={false}
                    showBarLabels={true}
                    barLabelPosition="inside"
                    barMode="group"
                    excelFileName="PLNCheckWeekdayActivityReport.xlsx"
                    chartFileName="PLNCheckWeekdayActivityReport.png"
                    excelSheetName="PLN Check Weekday Activity"
                    showTablePanel={true}
                    splitterOrientation="horizontal"
                    initialSplitPos={60}
                    showPagination={false}
                    showChartTypeSwitcher={false}
                    disableHighlighting={true}
                    disableSelection={true}
                    chartType="bar"
                    chartLayout={{
                        barmode: 'group',
                        yaxis: {
                            tickformat: '.0%',
                            range: [0, 0.3], // Set y-axis range from 0% to 30%
                        },
                        legend: {
                            orientation: 'h',
                            y: -0.2
                        }
                    }}
                />
            </div>
            
            {/* Weekday Activity Chart - Grouped by Day */}
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
                <ChartTableComponent 
                    id='chartPLNCheckWeekdayByDayActivity'
                    data={Array.isArray(weekdayData) ? weekdayData : []}
                    columns={weekdayByDayColumns}
                    isLoading={isLoadingWeekdayData}
                    chartTitle="PLN Check Data - Per Action (Weekdays) - Grouped by Day"
                    xAxisTitle="Weekday"
                    yAxisTitle="Percentage"
                    traces={weekdayByDayTraces}
                    showTrendLine={false}
                    showAverageLine={false}
                    showBarLabels={true}
                    barLabelPosition="inside"
                    barMode="group"
                    excelFileName="PLNCheckWeekdayByDayActivityReport.xlsx"
                    chartFileName="PLNCheckWeekdayByDayActivityReport.png"
                    excelSheetName="PLN Check Weekday By Day Activity"
                    showTablePanel={true}
                    splitterOrientation="horizontal"
                    initialSplitPos={60}
                    showPagination={false}
                    showChartTypeSwitcher={false}
                    disableHighlighting={true}
                    disableSelection={true}
                    chartType="bar"
                    chartLayout={{
                        barmode: 'group',
                        yaxis: {
                            tickformat: '.0%',
                            range: [0, 0.3], // Set y-axis range from 0% to 30%
                        },
                        legend: {
                            orientation: 'h',
                            y: -0.2
                        }
                    }}
                />
            </div>
        </div>
    );
}



// ===== C:\Users\mhali\OneDrive\Documents\NewDashboard\my-dashboard\src\components\DeptActivity\PSCActivityReport.jsx =====
import React, { useMemo, useEffect, useState } from 'react';
import { useLayout } from '../../contexts/LayoutContext';
import { updateTitle } from '../../utils/titleManager';
import ChartTableComponent from '../../components/ChartTableComponent';
import { createColumnHelper } from '@tanstack/react-table';

const columnHelper = createColumnHelper();

export default function PSCActivityReport({ data, isLoading }) {
    const { setTitle } = useLayout();
    const [weekdayData, setWeekdayData] = useState([]);
    const [isLoadingWeekdayData, setIsLoadingWeekdayData] = useState(true);
    const pscColorPalette = [
        'rgb(14, 50, 148)', 'rgb(122, 125, 129)', 'rgb(5, 100, 5)',
        'rgb(37, 44, 51)', 'rgb(7, 104, 143)', 'rgb(49, 136, 133)',
        'rgb(95, 158, 160)', 'rgb(70, 130, 180)', 'rgb(100, 149, 237)',
        'rgb(176, 224, 230)', 'rgb(7, 75, 77)', 'rgb(34, 88, 86)'
    ]; // PSC Theme - Aqua/Teal/Blue palette
    
    // Set the page title when component mounts
    useEffect(() => {
        updateTitle('PSCActivityReport', setTitle);
        return () => setTitle('My Dashboard');
    }, [setTitle]);
    
    // Fetch weekday data
    useEffect(() => {
        const fetchWeekdayData = async () => {
            try {
                const response = await fetch('./data/UniquePermitsAnalysisData/DeptAnnualActivityWeekdayJson.json');
                if (!response.ok) {
                    throw new Error('Failed to fetch weekday data');
                }
                const allData = await response.json();
                // Filter for PSC department only
                const pscData = allData.filter(item => item.department === 'PSC');
                setWeekdayData(pscData);
            } catch (error) {
                console.error('Error fetching weekday data:', error);
            } finally {
                setIsLoadingWeekdayData(false);
            }
        };
        
        fetchWeekdayData();
    }, []);
    
    console.log('PSCActivityReport - data:', data);
    console.log('PSCActivityReport - isLoading:', isLoading);
    console.log('PSCActivityReport - weekdayData:', weekdayData);
    // Define columns for the activity table using modern @tanstack/react-table v8 syntax
    const columns = useMemo(() => [
        {
            header: () => <div className="text-center">Year</div>,
            accessorKey: 'year',
            id: 'year',
            sortingFn: 'basic',
            cell: info => <div className="text-center">{info.getValue()}</div>
        },
        {
            header: () => <div className="text-center">Activity Count</div>,
            accessorKey: 'activity_count',
            id: 'activity_count',
            sortingFn: 'basic',
            cell: info => <div className="text-center">{info.getValue().toLocaleString()}</div>
        }
    ], []);
    
    // Define columns for the weekday table
    const weekdayColumns = useMemo(() => [
        columnHelper.accessor('year', {
            header: 'Fiscal Year',
            cell: info => info.getValue()
        }),
        columnHelper.accessor('monday', {
            header: 'Monday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('tuesday', {
            header: 'Tuesday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('wednesday', {
            header: 'Wednesday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('thursday', {
            header: 'Thursday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('friday', {
            header: 'Friday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        })
    ], []);

    // Create traces for the activity chart
    const traces = useMemo(() => {
        if (!data || !Array.isArray(data) || data.length === 0) {
            console.log('PSCActivityReport - No data available for traces');
            return [];
        }

        // Sort data by year
        const sortedData = [...data].sort((a, b) => a.year - b.year);
        
        return [{
            x: sortedData.map(item => item.year),
            y: sortedData.map(item => item.activity_count),
            type: 'bar',
            name: 'PSC Activity',
            marker: { color: pscColorPalette[0] },
            text: sortedData.map(item => item.activity_count.toLocaleString()),
            textposition: 'inside',
            insidetextanchor: 'middle',
            textfont: {
                color: 'white',
                size: 12
            },
            hovertemplate: '<b>Year: %{x}</b><br>Activity Count: %{y:,}<extra></extra>'
        }];
    }, [data, pscColorPalette]);
    
    // Create traces for the weekday chart (grouped by year)
    const weekdayTraces = useMemo(() => {
        if (!weekdayData || !Array.isArray(weekdayData) || weekdayData.length === 0) {
            console.log('PSCActivityReport - No weekday data available for traces');
            return [];
        }

        // Sort data by year
        const sortedData = [...weekdayData].sort((a, b) => a.year - b.year);
        
        // Create a trace for each weekday
        const weekdays = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'];
        // Theme 5: Ocean & Cool - Replaced by royalPurplePalette
        // const colors = ['#03045e', '#0077b6', '#00b4d8', '#48cae4', '#90e0ef'];
        const weekdayLabels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'];
        
        return weekdays.map((day, index) => ({
            x: sortedData.map(item => item.year),
            y: sortedData.map(item => item[day]), // Keep as decimal for Plotly
            type: 'bar',
            name: weekdayLabels[index],
            marker: { color: pscColorPalette[index % pscColorPalette.length] },
            text: sortedData.map(item => `${(item[day] * 100).toFixed(1)}%`),
            textposition: 'inside',
            insidetextanchor: 'middle',
            textangle: -90,
            textfont: {
                size: 10,
                color: 'white'
            },
            hovertemplate: '<b>Year: %{x}</b><br>' + weekdayLabels[index] + ': %{text}<extra></extra>'
        }));
    }, [weekdayData, pscColorPalette]);
    
    // Create traces for the weekday chart (grouped by day)
    const weekdayByDayTraces = useMemo(() => {
        if (!weekdayData || !Array.isArray(weekdayData) || weekdayData.length === 0) {
            console.log('PSCActivityReport - No weekday data available for day-grouped traces');
            return [];
        }

        // Sort data by year
        const sortedData = [...weekdayData].sort((a, b) => a.year - b.year);
        
        // Create a trace for each year
        return sortedData.map((yearData, index) => ({
            x: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],
            y: [
                yearData.monday,
                yearData.tuesday,
                yearData.wednesday,
                yearData.thursday,
                yearData.friday
            ],
            type: 'bar',
            name: `${yearData.year}`,
            marker: { color: pscColorPalette[index % pscColorPalette.length] },
            text: [
                `${(yearData.monday * 100).toFixed(1)}%`,
                `${(yearData.tuesday * 100).toFixed(1)}%`,
                `${(yearData.wednesday * 100).toFixed(1)}%`,
                `${(yearData.thursday * 100).toFixed(1)}%`,
                `${(yearData.friday * 100).toFixed(1)}%`
            ],
            textposition: 'inside',
            insidetextanchor: 'middle',
            textangle: -90,
            textfont: {
                size: 10,
                color: 'white'
            },
            hovertemplate: '<b>%{x}</b><br>Year: ' + yearData.year + '<br>Percentage: %{text}<extra></extra>'
        }));
    }, [weekdayData, pscColorPalette]);
    
    // Define columns for the weekday by day table
    const weekdayByDayColumns = useMemo(() => [
        columnHelper.accessor('year', {
            header: 'Fiscal Year',
            cell: info => info.getValue()
        }),
        columnHelper.accessor('monday', {
            header: 'Monday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('tuesday', {
            header: 'Tuesday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('wednesday', {
            header: 'Wednesday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('thursday', {
            header: 'Thursday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        }),
        columnHelper.accessor('friday', {
            header: 'Friday',
            cell: info => `${(info.getValue() * 100).toFixed(1)}%`
        })
    ], []);

    return (
        <div className="psc-activity-report space-y-8">
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
                <ChartTableComponent 
                    id='chartPSCActivity'
                    initialTableWidth={250}
                    data={Array.isArray(data) ? data : []}
                    columns={columns}
                    isLoading={isLoading}
                    chartTitle="PSC Department Activity by Year"
                    xAxisTitle="Year"
                    yAxisTitle="Activity Count"
                    traces={traces}
                    showTrendLine={true}
                    showAverageLine={true}
                    showBarLabels={true}
                    barLabelPosition="inside"
                    barLabelInsideAnchor="middle"
                    barLabelFontColor="white"
                    excelFileName="PSCActivityReport.xlsx"
                    chartFileName="PSCActivityReport.png"
                    excelSheetName="PSC Activity"
                    showTablePanel={true}
                    initialSplitPos={70}
                    showPagination={false}
                    showChartTypeSwitcher={true}
                    chartType="bar"
                    chartLayout={{
                        legend: {
                            orientation: 'h',
                            y: -0.2
                        }
                    }}
                />
            </div>
            
            {/* Weekday Activity Chart - Grouped by Year */}
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
                <ChartTableComponent 
                    id='chartPSCWeekdayActivity'
                    data={Array.isArray(weekdayData) ? weekdayData : []}
                    columns={weekdayColumns}
                    isLoading={isLoadingWeekdayData}
                    chartTitle="PSC Data - Per Action (Weekdays) - Grouped by Year"
                    xAxisTitle="Year"
                    yAxisTitle="Percentage"
                    traces={weekdayTraces}
                    showTrendLine={false}
                    showAverageLine={false}
                    showBarLabels={true}
                    barLabelPosition="inside"
                    barMode="group"
                    excelFileName="PSCWeekdayActivityReport.xlsx"
                    chartFileName="PSCWeekdayActivityReport.png"
                    excelSheetName="PSC Weekday Activity"
                    showTablePanel={true}
                    splitterOrientation="horizontal"
                    initialSplitPos={60}
                    showPagination={false}
                    showChartTypeSwitcher={false}
                    disableHighlighting={true}
                    chartType="bar"
                    chartLayout={{
                        barmode: 'group',
                        yaxis: {
                            tickformat: '.0%',
                            range: [0, 0.3], // Set y-axis range from 0% to 30%
                        },
                        legend: {
                            orientation: 'h',
                            y: -0.2
                        }
                    }}
                />
            </div>
            
            {/* Weekday Activity Chart - Grouped by Day */}
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
                <ChartTableComponent 
                    id='chartPSCWeekdayByDayActivity'
                    data={Array.isArray(weekdayData) ? weekdayData : []}
                    columns={weekdayByDayColumns}
                    isLoading={isLoadingWeekdayData}
                    chartTitle="PSC Data - Per Action (Weekdays) - Grouped by Day"
                    xAxisTitle="Weekday"
                    yAxisTitle="Percentage"
                    traces={weekdayByDayTraces}
                    showTrendLine={false}
                    showAverageLine={false}
                    showBarLabels={true}
                    barLabelPosition="inside"
                    barMode="group"
                    excelFileName="PSCWeekdayByDayActivityReport.xlsx"
                    chartFileName="PSCWeekdayByDayActivityReport.png"
                    excelSheetName="PSC Weekday By Day Activity"
                    showTablePanel={true}
                    splitterOrientation="horizontal"
                    initialSplitPos={60}
                    showPagination={false}
                    showChartTypeSwitcher={false}
                    disableHighlighting={true}
                    chartType="bar"
                    chartLayout={{
                        barmode: 'group',
                        yaxis: {
                            tickformat: '.0%',
                            range: [0, 0.3], // Set y-axis range from 0% to 30%
                        },
                        legend: {
                            orientation: 'h',
                            y: -0.2
                        }
                    }}
                />
            </div>
        </div>
    );
}



// ===== C:\Users\mhali\OneDrive\Documents\NewDashboard\my-dashboard\src\components\UniquePermitAnalysis\AnnualUniquePermitsReport.jsx =====
import React, { useMemo, useEffect, useState } from 'react';
import ChartTableComponent from '../ChartTableComponent';
import { createColumnHelper } from '@tanstack/react-table';
import BinCharts from './BinCharts';

const columnHelper = createColumnHelper();

const columns = [
    columnHelper.accessor('FiscalYear', {
        header: 'Fiscal Yr.',
        cell: info => info.getValue(),
        enableSorting: true,
        meta: {
            className: 'text-center' 
        }
    }),
    columnHelper.accessor('PermitCount', {
        header: 'Permits Vol.',
        cell: info => info.getValue().toLocaleString(),
        enableSorting: true,
        meta: {
            className: 'text-center'
        }
    }),
    columnHelper.accessor('AveragePermitsPerMonth', {
        header: 'Monthly Avg.',
        cell: info => Math.round(info.getValue()).toLocaleString(),
        enableSorting: true,
        meta: {
            className: 'text-center' 
        }
    }),
];

export default function AnnualUniquePermitsReport({ data, isLoading, selectedItemsCount }) {
    const pastelPalette = [
        'rgb(189, 135, 143)', 'rgb(5, 80, 105)', 'rgb(9, 107, 9)',
        'rgb(126, 126, 7)', 'rgb(172, 124, 172)', 'rgb(173, 166, 99)',
        'rgb(155, 180, 180)', 'rgb(167, 147, 145)', 'rgb(163, 175, 163)',
        'rgb(184, 169, 174)', 'rgb(110, 110, 5)', 'rgb(230, 230, 250)'
    ]; // Pastel Theme
    const [valuationData, setValuationData] = useState([]);
    const [filteredValuationData, setFilteredValuationData] = useState([]);
    
    // Fetch the valuation data
    useEffect(() => {
        fetch('/data/UniquePermitsAnalysisData/UniquePermitYearlyBinsJson.json')
            .then(response => response.json())
            .then(data => {
                setValuationData(data);
            })
            .catch(error => console.error('Error loading valuation data:', error));
    }, []);
    
    // Filter valuation data based on selected years in the main data
    useEffect(() => {
        if (valuationData.length === 0 || data.length === 0) return;
        
        // Get the years from the filtered data
        const selectedYears = data.map(item => item.FiscalYear);
        
        // Filter the valuation data to only include those years
        const filtered = valuationData.filter(item => selectedYears.includes(item.year));
        setFilteredValuationData(filtered);
    }, [valuationData, data]);
    const chartTitle = useMemo(() => {
        if (selectedItemsCount === 0) {
            return 'Annual Permit Volume for All Years';
        }
        if (selectedItemsCount === 1) {
            return `Annual Permit Volume for Selected Year`;
        }
        return `Annual Permit Volume for ${selectedItemsCount} Selected Years`;
    }, [selectedItemsCount]);

    const processedData = useMemo(() => {
        return data.map(item => ({
            ...item,
            AveragePermitsPerMonth: item.PermitCount / 12
        }));
    }, [data]);

    // Create columns for the valuation thresholds table
    const valuationColumns = useMemo(() => [
        columnHelper.accessor('permit_range', {
            header: 'Valuation Range',
            cell: info => info.getValue(),
            enableSorting: true,
            meta: {
                className: 'text-center'
            }
        }),
        ...Array.from(new Set(filteredValuationData.map(item => item.year)))
            .sort((a, b) => a - b)
            .map(year => columnHelper.accessor(
                row => {
                    const item = filteredValuationData.find(d => d.permit_range === row.permit_range && d.year === year);
                    return item ? item.count : 0;
                },
                {
                    id: `year_${year}`,
                    header: year.toString(),
                    cell: info => info.getValue().toLocaleString(),
                    enableSorting: true,
                    meta: { className: 'text-center' }
                }
            ))
    ], [filteredValuationData]);

    // Process the valuation data for the table
    const valuationTableData = useMemo(() => {
        if (filteredValuationData.length === 0) return [];
        
        // Get unique permit ranges
        const permitRanges = [...new Set(filteredValuationData.map(item => item.permit_range))];
        
        // Create a row for each permit range
        return permitRanges.map(range => ({
            permit_range: range
        }));
    }, [filteredValuationData]);

    // const yearColors = useMemo(() => ({
    //     2016: '#D32F2F', // Ruby Red
    //     2017: '#F44336', // Ruby Red
    //     2018: '#7e22ce', // Purple
    //     2019: '#a855f7', // Lighter Purple
    //     2020: '#94a3b8', // Gray
    //     2021: '#0ea5e9', // Sky Blue
    //     2022: '#16a34a', // Green
    //     2023: '#65a30d', // Lime Green
    //     2024: '#9d174d', // Pink
    //     2025: '#1e40af'  // Navy Blue
    // }), []); // Replaced by pastelPalette for valuationTraces

    // Create traces for the valuation chart
    const valuationTraces = useMemo(() => {
        if (filteredValuationData.length === 0) return [];
        
        // Get unique years and permit ranges
        const years = [...new Set(filteredValuationData.map(item => item.year))].sort((a, b) => a - b);
        const permitRanges = [...new Set(filteredValuationData.map(item => item.permit_range))];
        
        // Create a trace for each year
        return years.map((year, index) => {
            // Filter data for this year
            const yearData = filteredValuationData.filter(item => item.year === year);
            
            // Create an array of counts for each permit range
            const counts = permitRanges.map(range => {
                const item = yearData.find(d => d.permit_range === range);
                return item ? item.count : 0;
            });
            
            return {
                x: permitRanges,
                y: counts,
                name: year.toString(),
                type: 'bar',
                marker: { color: pastelPalette[index % pastelPalette.length] },
                text: counts.map(val => val > 0 ? val.toLocaleString() : ''),
                textposition: 'outside',
                insidetextanchor: 'middle',
                textfont: {
                    color: '#333',
                    size: 12
                },
                hovertemplate: `<b>Year:</b> ${year}<br><b>Range:</b> %{x}<br><b>Volume:</b> %{y}<extra></extra>`
            };
        });
    }, [filteredValuationData, pastelPalette]);

    // Determine if valuation data is loading
    const isValuationLoading = useMemo(() => {
        return isLoading || valuationData.length === 0;
    }, [isLoading, valuationData]);

    return (
        <div className="annual-analysis-section h-full flex flex-col space-y-8">
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
                <ChartTableComponent id='chartAnnualUniquePermitsReport'
                    data={processedData}
                    columns={columns}
                    isLoading={isLoading}
                    chartTitle={chartTitle}
                    xAxisTitle="Fiscal Year"
                    yAxisTitle="Total Permits"
                    xAccessor="FiscalYear"
                    yAccessor="PermitCount"
                    chartType="bar"
                    baseBarColor={pastelPalette[0]}
                    showTrendLine={true}
                    excelFileName="AnnualPermitReport.xlsx"
                    chartFileName="AnnualPermitReport.png"
                    initialTableWidth={320}
                    showTablePanel={true}
                    tableHeaderClassName="text-center"
                    showBarLabels={true}
                    barLabelPosition="inside"
                    barLabelInsideAnchor="middle"
                    barLabelFontSize={12}
                    barLabelFontColor="white"
                    barLabelFormat={value => value.toLocaleString()}
                    dataLabelsOnLine={true}
                    dataLabelsFontSize={12}
                    chartLayout={{
                        legend: {
                            orientation: 'h',
                            y: -0.2
                        }
                    }}
                />
            </div>
            
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4" style={{ minHeight: '1100px' }}>
                <ChartTableComponent id='chartValuationThresholds'
                    data={valuationTableData}
                    columns={valuationColumns}
                    isLoading={isValuationLoading}
                    chartTitle="Permit Volume by Unique Permit Numbers — Binned by Valuation Thresholds"
                    xAxisTitle="Valuation Range"
                    yAxisTitle="Permit Volume"
                    traces={valuationTraces}
                    barMode="group"
                    showTrendLine={false}
                    showAverageLine={false}
                    showBarLabels={true}
                    barLabelPosition="outside"
                    barLabelInsideAnchor="middle"
                    barLabelFontColor="#333"
                    excelFileName="ValuationThresholdReport.xlsx"
                    chartFileName="ValuationThresholdReport.png"
                    excelSheetName="Valuation Thresholds"
                    showTablePanel={true}
                    initialSplitPos={60}
                    showPagination={false}
                    showChartTypeSwitcher={false}
                    chartType="bar"
                    splitterOrientation="horizontal"
                    initialTableWidth={320}
                    disableHighlighting={true}
                    disableSelection={true}
                    tableHeaderClassName="text-center"
                    chartLayout={{
                        legend: {
                            orientation: 'h',
                            y: -0.2
                        }
                    }}
                />
            </div>
            
            {/* Individual Charts for Each Valuation Bin */}
            <BinCharts 
                valuationTableData={valuationTableData} 
                filteredValuationData={filteredValuationData} 
                columns={columns} 
                isValuationLoading={isValuationLoading} 
                pastelPalette={pastelPalette} 
            />
        </div>
    );
}



// ===== C:\Users\mhali\OneDrive\Documents\NewDashboard\my-dashboard\src\components\UniquePermitAnalysis\BinCharts.jsx =====
import React, { useMemo } from 'react';
import ChartTableComponent from '../ChartTableComponent';
import { createColumnHelper } from '@tanstack/react-table';

const columnHelper = createColumnHelper();

// BinCharts component to handle individual bin charts
export default function BinCharts({ valuationTableData, filteredValuationData, columns, isValuationLoading, pastelPalette }) {
    // Create custom columns for bin charts (without Monthly Avg. column)
    const binColumns = useMemo(() => [
        columnHelper.accessor('FiscalYear', {
            header: 'Fiscal Yr.',
            cell: info => info.getValue(),
            enableSorting: true,
            meta: {
                className: 'text-center' 
            }
        }),
        columnHelper.accessor('PermitCount', {
            header: 'Permits Vol.',
            cell: info => info.getValue().toLocaleString(),
            enableSorting: true,
            meta: {
                className: 'text-center'
            }
        }),
    ], []);
    // Create bin-specific data for each chart
    const binChartsData = useMemo(() => {
        if (!valuationTableData || valuationTableData.length === 0 || filteredValuationData.length === 0) {
            return [];
        }
        
        // Get unique permit ranges (bins) from the data
        const permitRanges = [...valuationTableData].map(item => item.permit_range);
        
        // Create data for each bin
        return permitRanges.map(permitRange => {
            // Filter data for this specific bin
            const binData = filteredValuationData.filter(item => item.permit_range === permitRange);
            
            // Transform to format needed for ChartTableComponent
            const chartData = binData.map(item => ({
                FiscalYear: item.year,
                PermitCount: item.count,
                AveragePermitsPerMonth: item.count / 12
            }));
            
            return {
                permitRange,
                chartData
            };
        });
    }, [valuationTableData, filteredValuationData]);
    
    // If no data, don't render anything
    if (binChartsData.length === 0) return null;
    
    // Render charts in reverse order (last bin first)
    return (
        <>
            {[...binChartsData].reverse().map((bin, index) => {
                // Create bin-specific chart title
                const binChartTitle = `Permit Volume for Valuation Range: ${bin.permitRange}`;
                
                // Use a different color from the pastelPalette for each bin chart
                const binColor = pastelPalette[index % pastelPalette.length];
                
                return (
                    <div key={`bin-chart-${index}`} className="bg-white dark:bg-gray-800 rounded-lg shadow p-4 mt-8">
                        <ChartTableComponent 
                            id={`chartValuationBin-${bin.permitRange}`}
                            data={bin.chartData}
                            columns={binColumns}
                            isLoading={isValuationLoading}
                            chartTitle={binChartTitle}
                            xAxisTitle="Fiscal Year"
                            yAxisTitle="Permit Count"
                            xAccessor="FiscalYear"
                            yAccessor="PermitCount"
                            chartType="bar"
                            baseBarColor={binColor}
                            showTrendLine={true}
                            excelFileName={`ValuationBin-${bin.permitRange}.xlsx`}
                            chartFileName={`ValuationBin-${bin.permitRange}.png`}
                            initialTableWidth={320}
                            showTablePanel={true}
                            tableHeaderClassName="text-center"
                            showBarLabels={true}
                            barLabelPosition="inside"
                            barLabelInsideAnchor="middle"
                            barLabelFontSize={12}
                            barLabelFontColor="white"
                            barLabelFormat={value => value.toLocaleString()}
                            dataLabelsOnLine={true}
                            dataLabelsFontSize={12}
                            chartLayout={{
                                legend: {
                                    orientation: 'h',
                                    y: -0.2
                                }
                            }}
                        />
                    </div>
                );
            })}
        </>
    );
}



// ===== C:\Users\mhali\OneDrive\Documents\NewDashboard\my-dashboard\src\components\UniquePermitAnalysis\MonthlyUniquePermitsReport.jsx =====
// src/components/UniquePermitAnalysis/MonthlyUniquePermitsReport.jsx

import React, { useMemo, useCallback } from 'react';
import ChartTableComponent from '../ChartTableComponent';
import { createColumnHelper } from '@tanstack/react-table';

const columnHelper = createColumnHelper();

// Custom RGB Palette for Monthly Reports
const customPalette = [
    'rgb(54, 84, 134)',   // RGB(54, 84, 134)
    'rgb(75, 123, 236)',  // RGB(75, 123, 236)
    'rgb(102, 51, 153)',  // RGB(102, 51, 153)
    'rgb(153, 102, 255)', // RGB(153, 102, 255)
    'rgb(201, 203, 207)', // RGB(201, 203, 207)
    'rgb(54, 162, 235)',  // RGB(54, 162, 235)
    'rgb(0, 200, 83)',    // RGB(0, 200, 83)
    'rgb(210, 105, 30)',  // RGB(210, 105, 30)
    'rgb(128, 0, 128)',   // RGB(128, 0, 128)
    'rgb(63, 81, 181)',   // RGB(63, 81, 181)
    'rgb(240, 228, 66)',  // RGB(240, 228, 66)
    'rgb(255, 99, 132)'   // RGB(255, 99, 132)
];

// Month names for conversion
const monthNames = [
  'January', 'February', 'March', 'April', 'May', 'June',
  'July', 'August', 'September', 'October', 'November', 'December'
];

export default function MonthlyUniquePermitsReport({ data, isLoading }) {
  // Using Theme B: Warm Earth Tones from user's VBA code
  // Using data directly from parent component (already filtered)

  // Define base columns for monthly data when a table is needed
  const baseMonthlyColumns = useMemo(() => [
    columnHelper.accessor('FiscalYear', { header: 'Fiscal Year', cell: info => info.getValue(), enableSorting: true }),
    columnHelper.accessor('FiscalMonth', { header: 'Month', cell: info => info.getValue(), enableSorting: true }),
    columnHelper.accessor('PermitCount', { header: 'Permit Count', cell: info => info.getValue().toLocaleString(), enableSorting: true }),
  ], []);
  
  // Define columns with Quarter for when it's needed
  const baseMonthlyColumnsWithQuarter = useMemo(() => [
    columnHelper.accessor('FiscalYear', { header: 'Fiscal Year', cell: info => info.getValue(), enableSorting: true }),
    columnHelper.accessor('FiscalQuarter', { header: 'Quarter', cell: info => `Q${info.getValue()}`, enableSorting: true }),
    columnHelper.accessor('FiscalMonth', { header: 'Month', cell: info => info.getValue(), enableSorting: true }),
    columnHelper.accessor('PermitCount', { header: 'Permit Count', cell: info => info.getValue().toLocaleString(), enableSorting: true }),
  ], []);

  // Columns for charts showing a specific month's trend over years
  const singleMonthTrendColumns = useMemo(() => [
    columnHelper.accessor('FiscalYear', { header: 'Fiscal Year', cell: info => info.getValue(), enableSorting: true }),
    columnHelper.accessor('PermitCount', { header: 'Permit Count', cell: info => info.getValue().toLocaleString(), enableSorting: true }),
  ], []);

  // Helper to construct titles based on current filters
  const getBaseTitle = useCallback((suffix = '') => {
    // Since we're now using filtered data from parent, we use a simpler title
    let title = 'Monthly Permit Volume';
    
    // Optional: Extract unique years from data to show in title
    if (data && data.length > 0) {
      const uniqueYears = [...new Set(data.map(d => d.FiscalYear))].sort((a, b) => a - b);
      if (uniqueYears.length === 1) {
        title += ` for FY ${uniqueYears[0]}`;
      } else if (uniqueYears.length > 1 && uniqueYears.length <= 3) {
        title += ` for FY ${uniqueYears.join(', ')}`;
      } else if (uniqueYears.length > 3) {
        title += ` for Selected Years`;
      }
    }
    // Check if data is filtered to a single month
    if (data && data.length > 0) {
      const uniqueMonths = [...new Set(data.map(d => d.FiscalMonth))];
      if (uniqueMonths.length === 1) {
        // Convert month abbreviation to full name
        const monthAbbr = uniqueMonths[0];
        const monthIndex = monthNames.findIndex(name => name.substring(0, 3) === monthAbbr);
        if (monthIndex !== -1) {
          title += ` ${monthNames[monthIndex]}`;
        }
      }
    }
    return `${title} ${suffix}`.trim();
  }, [data]);

  // --- Data preparation for specific charts ---

  // 0. Monthly Analysis (Full Width) - Grouped by Year
  // Transform data to create grouped bar chart traces for each year with monthly data
  const groupedBarTraces = useMemo(() => {
    if (!data || data.length === 0) return [];
    
    // Get unique years from the data
    const years = [...new Set(data.map(d => d.FiscalYear))].sort((a, b) => a - b);
    
    // Define month order for correct x-axis sorting
    const monthOrder = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    
    // yearColors object removed as it's replaced by goldenrodPalette
    
    // Create a trace for each year
    const traces = [];
    
    years.forEach((year, index) => {
      // Filter data for this year
      const yearData = data.filter(d => d.FiscalYear === year);
      
      // Create an array of permit counts for each month
      const monthlyValues = monthOrder.map(month => {
        const monthData = yearData.find(d => d.FiscalMonth === month);
        return monthData ? monthData.PermitCount : 0;
      });
      
      // Month labels are already in the right format
      const monthLabels = monthOrder;
      
      // Create the trace for this year
      traces.push({
        x: monthLabels,
        y: monthlyValues,
        name: year.toString(),
        type: 'bar',
        marker: { color: customPalette[index % customPalette.length] }, // Ensure this uses the theme palette
        text: monthlyValues.map(val => val > 0 ? val.toString() : ''),
        textposition: 'inside',
        insidetextanchor: 'middle',
        textfont: {
          size: 11,
          color: 'white',
          family: 'sans-serif'
        },
        hovertemplate: `<b>%{x} ${year}</b><br>Permits: %{y}<extra></extra>`
      });
    });
    
    return traces;
  }, [data, customPalette]); // Using Theme B warm earth tones

  // 1. Monthly Analysis (Full Width) - Grouped by Month
  // Transform data to create grouped bar chart traces for each year with monthly data
  const monthlyGroupedTraces = useMemo(() => {
    if (!data || data.length === 0) return [];
    
    // Get unique years from the data
    const years = [...new Set(data.map(d => d.FiscalYear))].sort((a, b) => a - b);
    
    // Define month order for correct x-axis sorting
    const monthOrder = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    
    // Create a trace for each year
    const traces = [];
    
    years.forEach((year, index) => {
      // Filter data for this year
      const yearData = data.filter(d => d.FiscalYear === year);
      
      // Create an array of permit counts for each month
      const monthlyValues = monthOrder.map(month => {
        const monthData = yearData.find(d => d.FiscalMonth === month);
        return monthData ? monthData.PermitCount : 0;
      });
      
      // Month labels are already in the right format
      const monthLabels = monthOrder;
      
      // Create the trace for this year
      traces.push({
        x: monthLabels,
        y: monthlyValues,
        name: year.toString(),
        type: 'bar',
        marker: { color: customPalette[index % customPalette.length] },
        text: monthlyValues.map(val => val > 0 ? val.toLocaleString() : ''),
        textposition: 'outside',
        textfont: {
          size: 12,
          color: 'black'
        },
        hovertemplate: `<b>%{x} ${year}</b><br>Permits: %{y}<extra></extra>`
      });
    });
    
    return traces;
  }, [data, customPalette]);

  // 2. Monthly Permit Count by Year (Full Width) - for trend across years
  // This aggregates permits by FiscalYear from the incoming data
  const monthlyByYearData = useMemo(() => {
    const yearMap = new Map();
    data.forEach(item => {
      const year = item.FiscalYear;
      yearMap.set(year, (yearMap.get(year) || 0) + item.PermitCount);
    });
    return Array.from(yearMap).map(([FiscalYear, PermitCount]) => ({ FiscalYear, PermitCount }));
  }, [data]);

  // Data for each individual month across years (for 2x6 grid)
  const getSingleMonthData = useCallback((monthNum) => {
    // Convert month number to abbreviation (Jan, Feb, etc.)
    const monthOrder = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    const monthAbbr = monthOrder[monthNum - 1];
    return data.filter(d => d.FiscalMonth === monthAbbr);
  }, [data]);

  // Generate traces for a single month's data
  const generateMonthlyTraces = useCallback((monthData) => {
    if (!monthData || monthData.length === 0) return [];
    
    // Sort data by year to ensure line connects points in chronological order
    const sortedMonthData = [...monthData].sort((a, b) => a.FiscalYear - b.FiscalYear);

    const yearsX = sortedMonthData.map(d => d.FiscalYear.toString()); // X-axis values
    const countsY = sortedMonthData.map(d => d.PermitCount || 0);    // Y-axis values

    // Use the first color from the palette for this single trace, or a default
    const traceColor = customPalette[0] || 'rgb(55, 126, 184)';

    // Only provide the data and basic styling, let ChartTableComponent handle the chart type
    return [{
      x: yearsX,
      y: countsY,
      name: 'Permits Trend',
      // Don't specify type or mode here - let ChartTableComponent handle it
      line: {
        color: traceColor,
        width: 2
      },
      marker: {
        color: traceColor,
        size: 6
      },
      // Don't specify text, textposition, or textfont - let ChartTableComponent handle it
      hovertemplate: `<b>Year: %{x}</b><br>Permits: %{y}<extra></extra>`
    }];
  }, [customPalette]);

  // Generate an array of data and traces for all 12 months
  const monthlyBreakdownChartsData = useMemo(() => {
    return Array.from({ length: 12 }, (_, i) => {
      const monthNum = i + 1;
      const monthData = getSingleMonthData(monthNum);
      return {
        monthNum,
        data: monthData,
        traces: generateMonthlyTraces(monthData)
      };
    });
  }, [getSingleMonthData, generateMonthlyTraces]);

  // Calculate the global maximum value for the y-axis across all monthly charts
  const globalMaxPermitCount = useMemo(() => {
    // Flatten all monthly data and find the maximum PermitCount
    const allMonthlyData = monthlyBreakdownChartsData.flatMap(({ data }) => data);
    const maxValue = Math.max(...allMonthlyData.map(item => item.PermitCount), 0);
    // Round up to the nearest 10 or 100 for a clean max value
    return Math.ceil(maxValue / 100) * 100;
  }, [monthlyBreakdownChartsData]);


  return (
    <div className="monthly-analysis-section space-y-8">
      {/* Full-width charts */}
      <div className="flex flex-col gap-8">
        {/* Chart 0: Quarterly Grouped Bar Chart */}
        <div className="bg-white dark:bg-gray-800/50 p-4 rounded-lg shadow mb-8" id='quarterly-grouped-report'>
          <ChartTableComponent id='chart0_monthly_grouped'
            data={data}
            columns={baseMonthlyColumns}
            isLoading={isLoading}
            chartTitle="Permit Volume by Unique Permit Numbers — Quarterly Volumes"
            xAxisTitle="Fiscal Quarter"
            yAxisTitle="Permit Volume"
            traces={groupedBarTraces}
            barMode="group"
            showTrendLine={false}
            showAverageLine={false}
            showBarLabels={true}
            showDataLabels={true}
            dataLabelPosition="outside"
            barLabelFontColor="black"
            excelFileName="Quarterly-Grouped-Report.xlsx"
            chartFileName="Quarterly-Grouped-Report.png"
            excelSheetName="Quarterly Grouped Data"
            showTablePanel={true}
            initialSplitPos={80}
            initialTableWidth={350}
            tableHeaderClassName="text-center"
            showPagination={true}
            showChartTypeSwitcher={false}
          />
        </div>

        {/* Chart 1 removed as requested */}

        {/* Chart 2 removed as requested */}
      </div>

      {/* 2x6 Grid of Monthly Charts */}
      <h3 className="text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4 pt-4 border-t border-gray-200 dark:border-gray-700">
        Monthly Breakdown by Specific Month
      </h3>
      <div id='monthly-breakdown-grid' className="grid grid-cols-2 grid-rows-6 gap-4 border border-gray-200 dark:border-gray-700"> {/* Fixed 2 columns x 6 rows grid layout with outer border */}
        {monthlyBreakdownChartsData.map(({ monthNum, data: monthData, traces }) => (
          <div className="border border-gray-200 dark:border-gray-700 p-2" key={`month-chart-${monthNum}`}>
            <ChartTableComponent id={`chart_monthly_${monthNum}`}
            data={monthData}
            columns={singleMonthTrendColumns}
            isLoading={isLoading}
            chartTitle={`${monthNames[monthNum - 1]} Permits`}
            traces={traces} // Use the generated traces
            barMode="group" // Group the bars
            barLabelPosition="inside" // Position bar labels inside
            barLabelInsideAnchor="middle" // Center the labels inside bars
            // Dynamic label color based on chart type - handled via custom props below
            barLabelFontSize={10} // Slightly larger font for readability
            showBarLabels={true} // Explicitly show data labels (applies to bar charts)
            initialChartType="line" // Start with line chart - as requested
            showDataLabels={true} // Show data labels for all chart types
            showTablePanel={false} // Hide table for smaller charts
            initialSplitPos={100} // Chart only
            showChartTypeSwitcher={true} // Enable chart type switching
            hideSplitter={true} // Hide the draggable splitter
            showTableToggle={false} // Hide the table toggle button
            // Custom props to handle dynamic label colors based on chart type
            dataLabelFontColor="black" // For line chart data labels
            barLabelFontColor="white" // For bar chart data labels
            chartLayout={{
              showlegend: false, // Hide the legend
              yaxis: {
                range: [0, globalMaxPermitCount], // Set consistent y-axis range
                fixedrange: true, // Prevent zooming on y-axis
                showgrid: true, // Show horizontal grid lines
                gridcolor: 'rgba(200, 200, 200, 0.3)' // Light gray grid lines
              },
              xaxis: {
                showgrid: true, // Show vertical grid lines
                gridcolor: 'rgba(200, 200, 200, 0.3)' // Light gray grid lines
              }
            }}
          />
          </div>
        ))}
      </div>
    </div>
  );
}



// ===== C:\Users\mhali\OneDrive\Documents\NewDashboard\my-dashboard\src\components\UniquePermitAnalysis\QuarterlyUniquePermitsReport.jsx =====
import React, { useMemo, useCallback } from 'react';
import ChartTableComponent from '../ChartTableComponent';
import { createColumnHelper } from '@tanstack/react-table';

const columnHelper = createColumnHelper();

// Custom RGB Palette
const customPalette = [
    'rgb(220, 88, 42)', 'rgb(255, 159, 64)', 'rgb(153, 102, 51)', 
    'rgb(134, 100, 36)', 'rgb(210, 105, 30)', 'rgb(204, 121, 167)', 
    'rgb(240, 128, 128)', 'rgb(255, 205, 86)', 'rgb(201, 203, 207)', 
    'rgb(75, 192, 192)', 'rgb(0, 114, 178)', 'rgb(86, 180, 233)'
];

export default function QuarterlyUniquePermitsReport({ data, isLoading }) {

    // --- Column Definitions for the various tables ---
    const baseQuarterlyColumns = useMemo(() => [
        columnHelper.accessor('FiscalYear', { header: 'Fiscal Yr.', meta: { className: 'text-center' } }),
        columnHelper.accessor('FiscalQuarter', { header: 'Quarter', cell: info => `Q${info.getValue()}`, meta: { className: 'text-center' } }),
        columnHelper.accessor('PermitCount', { header: 'Permit Vol.', cell: info => info.getValue().toLocaleString(), meta: { className: 'text-center' } }),
    ], []);

    const singleYearColumns = useMemo(() => [
        columnHelper.accessor('FiscalYear', { header: 'Fiscal Year', meta: { className: 'text-center' } }),
        columnHelper.accessor('PermitCount', { header: 'Total Permits', cell: info => info.getValue().toLocaleString(), meta: { className: 'text-center' } }),
    ], []);

    const singleQuarterTrendColumns = useMemo(() => [
        columnHelper.accessor('FiscalYear', { header: 'Fiscal Year', meta: { className: 'text-center' } }),
        columnHelper.accessor('PermitCount', { header: 'Permit Count', cell: info => info.getValue().toLocaleString(), meta: { className: 'text-center' } }),
    ], []);

    // --- Data Preparation Logic ---

    // 1. Data transformation for the Grouped Bar Chart
    const groupedBarTraces = useMemo(() => {
        if (!Array.isArray(data) || data.length === 0) return [];
        const years = [...new Set(data.map(d => d.FiscalYear))].sort((a,b) => a - b);
        const traces = [];
        // Using Ocean Blue Theme Palette
        // const colors = ['#03045e', '#0077b6', '#00b4d8', '#48cae4', '#90e0ef']; // Old palette

        for (let i = 1; i <= 4; i++) {
            const quarterData = years.map(year => {
                const item = data.find(d => d.FiscalYear === year && d.FiscalQuarter === i);
                return item ? item.PermitCount : null; 
            });
            
            // Common properties for both bar and line charts
            const traceBase = {
                x: years,
                y: quarterData,
                name: `Q${i}`,
                text: quarterData.map(value => value ? `Q${i}: ${value.toLocaleString()}` : ''),
                hoverinfo: 'y+name',
                hovertemplate: `<b>%{x} - Q${i}</b><br>Volume: %{y:,} permits<extra></extra>`,
                marker: { color: customPalette[i-1 % customPalette.length] } // Use Ocean Blue Palette
            };
            
            // The trace will work for both bar and line charts
            // When in bar mode, the bar-specific properties will be used
            // When in line mode, the line-specific properties will be used
            traces.push({
                ...traceBase,
                // Bar chart specific properties
                type: 'bar', // Default type is bar, ChartTableComponent will change this when switching to line
                textposition: 'inside',
                insidetextanchor: 'middle',
                textfont: {
                    color: 'white',
                    size: 11,
                    family: 'sans-serif'
                },
                textangle: -90,
                
                // Line chart specific properties (will be used when switching to line chart)
                // These properties will be applied by the Chart component when type is changed to 'scatter'
                line: {
                    color: customPalette[i-1 % customPalette.length], // Use Ocean Blue Palette
                    width: 3
                },
                mode: 'lines+markers', // For line chart mode
            });
        }
        return traces;
    }, [data, customPalette]);
    
    // 2. Data transformation for Chart 2 (Quarterly Data by Year)
    const quarterlyByYearData = useMemo(() => {
        if (!data || data.length === 0) return [];
        
        // Group data by fiscal year and sum permit counts
        const yearlyTotals = {};
        data.forEach(item => {
            const year = item.FiscalYear;
            if (!yearlyTotals[year]) {
                yearlyTotals[year] = { FiscalYear: year, PermitCount: 0 };
            }
            yearlyTotals[year].PermitCount += item.PermitCount;
        });
        
        // Convert to array and sort by year
        return Object.values(yearlyTotals).sort((a, b) => a.FiscalYear - b.FiscalYear);
    }, [data]);
    
    // 3. Generate traces for Chart 2 (Grouped by Quarter)
    const quarterlyGroupedTraces = useMemo(() => {
        if (!data || data.length === 0) return [];
        
        // Get all unique years from the data
        const years = [...new Set(data.map(d => d.FiscalYear))].sort((a, b) => a - b);
        
        // Create traces for each year
        const traces = [];
        const quarters = [1, 2, 3, 4];
        
        // For each year, create a trace with data for all quarters
        // Each year will be a different bar group, colored by the customPalette
        years.forEach((year, i) => {
            // For each quarter, find the permit count for this year
            const quarterValues = quarters.map(quarter => {
                const item = data.find(d => d.FiscalYear === year && d.FiscalQuarter === quarter);
                return item ? item.PermitCount : 0;
            });
            
            // Create the trace for this year
            traces.push({
                x: quarters.map(q => `Q${q}`), // X-axis shows quarters
                y: quarterValues,
                name: `${year}`,
                type: 'bar',
                // Use the customPalette, cycling through colors for each year
                marker: { color: customPalette[i % customPalette.length] },
                text: quarterValues.map((value, idx) => value ? `${year}: ${value.toLocaleString()}` : ''),
                textposition: 'inside',
                insidetextanchor: 'middle',
                textfont: {
                    color: 'white',
                    size: 11,
                    family: 'sans-serif'
                },
                textangle: -90,
                hoverinfo: 'y+name',
                hovertemplate: `<b>${year} - %{x}</b><br>Volume: %{y:,} permits<extra></extra>`
            });
        });
        
        return traces;
    }, [data, customPalette]);

    // Data for individual quarter charts
    const q1Data = useMemo(() => data.filter(item => item.FiscalQuarter === 1), [data]);
    const q2Data = useMemo(() => data.filter(item => item.FiscalQuarter === 2), [data]);
    const q3Data = useMemo(() => data.filter(item => item.FiscalQuarter === 3), [data]);
    const q4Data = useMemo(() => data.filter(item => item.FiscalQuarter === 4), [data]);
    
    // Calculate global min and max for consistent y-axis across all quarterly charts
    const quarterlyYAxisRange = useMemo(() => {
        if (!data || data.length === 0) return { min: 0, max: 100 };
        
        // Get all permit counts from quarterly data
        const allQuarterlyValues = [
            ...q1Data.map(item => item.PermitCount),
            ...q2Data.map(item => item.PermitCount),
            ...q3Data.map(item => item.PermitCount),
            ...q4Data.map(item => item.PermitCount)
        ].filter(val => val !== undefined && val !== null);
        
        if (allQuarterlyValues.length === 0) return { min: 0, max: 100 };
        
        // Calculate min and max
        const min = Math.floor(Math.min(...allQuarterlyValues) * 0.9); // Add 10% padding below
        const max = Math.ceil(Math.max(...allQuarterlyValues) * 1.1);  // Add 10% padding above
        
        return { min: Math.max(0, min), max }; // Ensure min is never negative
    }, [data, q1Data, q2Data, q3Data, q4Data]);
    
    // Create consistent chart layout for quarterly charts
    const quarterlyChartLayout = useMemo(() => ({
        yaxis: {
            range: [quarterlyYAxisRange.min, quarterlyYAxisRange.max],
            autorange: false
        }
    }), [quarterlyYAxisRange]);

    // 4. Generate traces for the quarterly trend line chart
    const quarterlyTrendTraces = useMemo(() => {
        if (!Array.isArray(data) || data.length === 0) return [];

        // 1. Sort data chronologically
        const sortedData = [...data].sort((a, b) => {
            if (a.FiscalYear === b.FiscalYear) {
                return a.FiscalQuarter - b.FiscalQuarter;
            }
            return a.FiscalYear - b.FiscalYear;
        });

        // 2. Create X-axis labels (e.g., "2023-Q1") and Y-axis values
        const xValues = sortedData.map(item => `${item.FiscalYear}-Q${item.FiscalQuarter}`);
        const yValues = sortedData.map(item => item.PermitCount);

        // 3. Create single trace object
        const singleTrace = {
            x: xValues,
            y: yValues,
            type: 'scatter',
            mode: 'lines+markers',
            name: 'Permit Volume Trend',
            line: { color: customPalette[0], width: 3 }, // Use first color from the theme
            marker: { size: 8, color: customPalette[0] },
            hovertemplate: '<b>%{x}</b><br>Volume: %{y:,} permits<extra></extra>'
        };

        return [singleTrace]; // Return as an array containing the single trace
    }, [data, customPalette]);

    return (
            <>
                {/* --- Chart 0: Quarterly Trend Line Chart --- */}
                <div className="bg-white dark:bg-gray-800/50 p-4 rounded-lg shadow mb-8" id='quarterly-trend-report'>
                    <ChartTableComponent id='chart0_Quarterly_Trend'
                        data={data}
                        columns={baseQuarterlyColumns}
                        isLoading={isLoading}
                        chartTitle="Permit Volume by Unique Permit Numbers — Quarterly Trend"
                        xAxisTitle="Quarter"
                        yAxisTitle="Permit Volume"
                        traces={quarterlyTrendTraces}
                        chartType="line"
                        showTrendLine={true}
                        showAverageLine={true}
                        xAxisTickAngle={-45}
                        showTablePanel={true}
                        initialSplitPos={80}
                        initialTableWidth={350}
                        tableHeaderClassName="text-center"

                        chartLayout={{
                            showlegend: false  // Hide the legend completely
                        }}
                        excelFileName="Quarterly-Trend-Report.xlsx"
                        chartFileName="Quarterly-Trend-Report.png"
                        excelSheetName="Quarterly Trend Data"
                        showPagination={true}
                        showChartTypeSwitcher={false}
                        disableHighlighting={false}
                        disableSelection={false}
                    />
                </div>
                
                {/* --- Chart 1: Grouped Bar Chart --- */}
                <div id='quarterly-grouped-report-div' className="bg-white dark:bg-gray-800/50 p-4 rounded-lg shadow mb-8" id='quarterly-grouped-report'>
                    <ChartTableComponent id='chart1_Quarterly'
                        data={data}
                        columns={baseQuarterlyColumns}
                        isLoading={isLoading}
                        chartTitle="Permit Volume by Unique Permit Numbers — Quarterly Volumes"
                        xAxisTitle="Fiscal Year"
                        yAxisTitle="Permit Volume"
                        traces={groupedBarTraces}
                        barMode="group"
                        showTrendLine={false}
                        showAverageLine={false}
                        showBarLabels={true}
                        showDataLabels={true}
                        dataLabelPosition="outside"
                        barLabelFontColor="black"
                        excelFileName="Quarterly-Grouped-Report.xlsx"
                        chartFileName="Quarterly-Grouped-Report.png"
                        excelSheetName="Quarterly Grouped Data"
                        showTablePanel={true}
                        initialSplitPos={80}
                        initialTableWidth={350}
                        tableHeaderClassName="text-center"
                        disableHighlighting={true}
                        disableSelection={true}
                        showPagination={true}
                        showChartTypeSwitcher={false}
                    />
                </div>

                {/* --- Chart 2: Aggregated Line Chart --- */}
                <div className="bg-white dark:bg-gray-800/50 p-4 rounded-lg shadow">
                    <ChartTableComponent id='chart2_Quarterly'
                        data={data}
                        columns={baseQuarterlyColumns}
                        isLoading={isLoading}
                        chartTitle="Permit Volume by Unique Permit Numbers — Quarterly Volumes"
                        xAxisTitle="Fiscal Year"
                        yAxisTitle="Permit Volume"
                        traces={quarterlyGroupedTraces}
                        barMode="group"
                        showTrendLine={false}
                        showAverageLine={false}
                        showBarLabels={true}
                        showDataLabels={true}
                        dataLabelPosition="outside"
                        barLabelFontColor="black"
                        showTablePanel={true}
                        initialSplitPos={80}
                        initialTableWidth={350}
                        tableHeaderClassName="text-center"
                        disableHighlighting={true}
                        disableSelection={true}
                        excelFileName="Quarterly-Grouped-Report-2.xlsx"
                        chartFileName="Quarterly-Grouped-Report-2.png"
                        excelSheetName="Quarterly Grouped Data"
                        showPagination={true}
                        showChartTypeSwitcher={false}
                    />
                </div>

                {/* --- 2x2 Grid of Charts --- */}
            <h3 className="text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                Quarterly Breakdown by Specific Quarter
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="bg-white dark:bg-gray-800/50 p-4 rounded-lg shadow">
                    <ChartTableComponent id='chart3_Quarterly_Q1'            
                        data={q1Data}
                        columns={singleQuarterTrendColumns}
                        isLoading={isLoading}
                        chartTitle="Q1 Permits Over Years"
                        xAxisTitle="Fiscal Year"
                        yAxisTitle="Permit Count"
                        xAccessor="FiscalYear"
                        yAccessor="PermitCount"
                        chartType="line"
                        baseBarColor={customPalette[0]} // Q1 - Ocean Blue
                        showTablePanel={false}
                        initialSplitPos={100}
                        hideSplitter={true}
                        chartLayout={{...quarterlyChartLayout, showlegend: false}}
                        chartFileName="Q1-Permits-Chart.png"
                        showTrendLine={false}
                        showAverageLine={true}
                        showTableToggle={false}
                        showDataLabels={true}
                        dataLabelPosition="outside"
                    />
                </div>
                <div className="bg-white dark:bg-gray-800/50 p-4 rounded-lg shadow">
                    <ChartTableComponent id='chart4_Quarterly_Q2'
                        data={q2Data}
                        columns={singleQuarterTrendColumns}
                        isLoading={isLoading}
                        chartTitle="Q2 Permits Over Years"
                        xAxisTitle="Fiscal Year"
                        yAxisTitle="Permit Count"
                        xAccessor="FiscalYear"
                        yAccessor="PermitCount"
                        initialChartType="line" // Start with line chart
                        showChartTypeSwitcher={true} // Enable chart type switching
                        baseBarColor={customPalette[1]} // Q2 - Sky Blue
                        barLabelPosition="inside" // Position bar labels inside
                        barLabelInsideAnchor="middle" // Center the labels inside bars
                        dataLabelFontColor="black" // For line chart data labels
                        barLabelFontColor="white" // For bar chart data labels
                        showTablePanel={false}
                        initialSplitPos={100}
                        hideSplitter={true}
                        chartLayout={{...quarterlyChartLayout, showlegend: false}}
                        chartFileName="Q2-Permits-Chart.png"
                        showTrendLine={false}
                        showAverageLine={true}
                        showTableToggle={false}
                        showDataLabels={true}
                    />
                </div>
                <div className="bg-white dark:bg-gray-800/50 p-4 rounded-lg shadow">
                    <ChartTableComponent id='chart5_Quarterly_Q3'
                        data={q3Data}
                        columns={singleQuarterTrendColumns}
                        isLoading={isLoading}
                        chartTitle="Q3 Permits Over Years"
                        xAxisTitle="Fiscal Year"
                        yAxisTitle="Permit Count"
                        xAccessor="FiscalYear"
                        yAccessor="PermitCount"
                        initialChartType="line" // Start with line chart
                        showChartTypeSwitcher={true} // Enable chart type switching
                        baseBarColor={customPalette[2]} // Q3 - Light Sky Blue
                        barLabelPosition="inside" // Position bar labels inside
                        barLabelInsideAnchor="middle" // Center the labels inside bars
                        dataLabelFontColor="black" // For line chart data labels
                        barLabelFontColor="white" // For bar chart data labels
                        showTablePanel={false}
                        initialSplitPos={100}
                        hideSplitter={true}
                        chartLayout={{...quarterlyChartLayout, showlegend: false}}
                        chartFileName="Q3-Permits-Chart.png"
                        showTrendLine={false}
                        showAverageLine={true}
                        showTableToggle={false}
                        showDataLabels={true}
                    />
                </div>
                <div className="bg-white dark:bg-gray-800/50 p-4 rounded-lg shadow">
                    <ChartTableComponent id='chart6_Quarterly_Q4'
                        data={q4Data}
                        columns={singleQuarterTrendColumns}
                        isLoading={isLoading}
                        chartTitle="Q4 Permits Over Years"
                        xAxisTitle="Fiscal Year"
                        yAxisTitle="Permit Count"
                        xAccessor="FiscalYear"
                        yAccessor="PermitCount"
                        showTableToggle={false}
                        initialChartType="line" // Start with line chart
                        showChartTypeSwitcher={true} // Enable chart type switching
                        baseBarColor={customPalette[3]} // Q4 - Pale Sky Blue
                        barLabelPosition="inside" // Position bar labels inside
                        barLabelInsideAnchor="middle" // Center the labels inside bars
                        dataLabelFontColor="black" // For line chart data labels
                        barLabelFontColor="white" // For bar chart data labels
                        showTablePanel={false}
                        initialSplitPos={100}
                        hideSplitter={true}
                        chartLayout={{...quarterlyChartLayout, showlegend: false}}
                        chartFileName="Q4-Permits-Chart.png"
                        showTrendLine={false}
                        showAverageLine={true}
                        showDataLabels={true}
                    />
                </div>
            </div>
        </>
    );
}



